
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import java_cup.runtime.*;
import java.util.LinkedList;
import funciones.token;
import funciones.valor;
import java.util.ArrayList;
import funciones.valor_variable;
import java.lang.reflect.Array;
import funciones.IdArrayListHashMap;
import java.util.ArrayList;
import java.util.HashMap;
import funciones.acumulador;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\047\000\002\002\004\000\002\002\006\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\004\000\002\004\005\000\002\005\012\000" +
    "\002\005\014\000\002\006\005\000\002\006\003\000\002" +
    "\007\003\000\002\007\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\010\000\002\010\010\000\002\010\010" +
    "\000\002\010\010\000\002\010\010\000\002\010\006\000" +
    "\002\010\006\000\002\010\006\000\002\010\006\000\002" +
    "\010\006\000\002\010\006\000\002\011\014\000\002\011" +
    "\017\000\002\012\003\000\002\012\005\000\002\013\005" +
    "\000\002\013\003\000\002\014\003\000\002\014\003\000" +
    "\002\015\005\000\002\015\004\000\002\016\005\000\002" +
    "\016\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\205\000\004\022\004\001\002\000\012\003\010\011" +
    "\012\017\007\026\016\001\002\000\004\002\006\001\002" +
    "\000\004\002\001\001\002\000\004\006\177\001\002\000" +
    "\006\005\174\010\175\001\002\000\014\003\ufffe\010\ufffe" +
    "\011\ufffe\017\ufffe\026\ufffe\001\002\000\004\006\144\001" +
    "\002\000\014\003\010\010\141\011\012\017\007\026\016" +
    "\001\002\000\014\003\ufffd\010\ufffd\011\ufffd\017\ufffd\026" +
    "\ufffd\001\002\000\014\003\ufffc\010\ufffc\011\ufffc\017\ufffc" +
    "\026\ufffc\001\002\000\004\006\017\001\002\000\006\020" +
    "\020\025\022\001\002\000\004\006\uffe4\001\002\000\004" +
    "\006\025\001\002\000\004\023\023\001\002\000\004\024" +
    "\024\001\002\000\004\006\uffe3\001\002\000\004\006\026" +
    "\001\002\000\004\027\027\001\002\000\004\062\030\001" +
    "\002\000\004\021\031\001\002\000\004\023\032\001\002" +
    "\000\036\012\050\013\042\032\034\033\051\034\040\035" +
    "\046\036\044\037\052\040\033\041\043\042\037\043\035" +
    "\044\053\062\047\001\002\000\004\030\136\001\002\000" +
    "\004\030\131\001\002\000\004\030\126\001\002\000\006" +
    "\007\uffe1\024\uffe1\001\002\000\004\030\123\001\002\000" +
    "\004\030\116\001\002\000\006\007\063\024\113\001\002" +
    "\000\014\007\ufff3\010\ufff3\024\ufff3\031\ufff3\063\ufff3\001" +
    "\002\000\004\030\110\001\002\000\004\030\103\001\002" +
    "\000\006\007\uffdf\024\uffdf\001\002\000\004\030\076\001" +
    "\002\000\014\007\ufff2\010\ufff2\024\ufff2\031\ufff2\063\ufff2" +
    "\001\002\000\006\007\uffe0\024\uffe0\001\002\000\004\030" +
    "\071\001\002\000\004\030\066\001\002\000\004\030\054" +
    "\001\002\000\006\023\055\027\057\001\002\000\036\012" +
    "\050\013\042\032\034\033\051\034\040\035\046\036\044" +
    "\037\052\040\033\041\043\042\037\043\035\044\053\062" +
    "\047\001\002\000\004\031\061\001\002\000\004\062\060" +
    "\001\002\000\004\031\uffdb\001\002\000\014\007\uffe7\010" +
    "\uffe7\024\uffe7\031\uffe7\063\uffe7\001\002\000\006\007\063" +
    "\024\064\001\002\000\036\012\050\013\042\032\034\033" +
    "\051\034\040\035\046\036\044\037\052\040\033\041\043" +
    "\042\037\043\035\044\053\062\047\001\002\000\004\031" +
    "\uffdc\001\002\000\006\007\uffe2\024\uffe2\001\002\000\006" +
    "\023\055\027\057\001\002\000\004\031\070\001\002\000" +
    "\014\007\uffec\010\uffec\024\uffec\031\uffec\063\uffec\001\002" +
    "\000\034\013\042\032\034\033\051\034\040\035\046\036" +
    "\044\037\052\040\033\041\043\042\037\043\035\044\053" +
    "\062\047\001\002\000\004\007\073\001\002\000\034\013" +
    "\042\032\034\033\051\034\040\035\046\036\044\037\052" +
    "\040\033\041\043\042\037\043\035\044\053\062\047\001" +
    "\002\000\004\031\075\001\002\000\014\007\ufff0\010\ufff0" +
    "\024\ufff0\031\ufff0\063\ufff0\001\002\000\034\013\042\032" +
    "\034\033\051\034\040\035\046\036\044\037\052\040\033" +
    "\041\043\042\037\043\035\044\053\062\047\001\002\000" +
    "\004\007\100\001\002\000\034\013\042\032\034\033\051" +
    "\034\040\035\046\036\044\037\052\040\033\041\043\042" +
    "\037\043\035\044\053\062\047\001\002\000\004\031\102" +
    "\001\002\000\014\007\uffee\010\uffee\024\uffee\031\uffee\063" +
    "\uffee\001\002\000\034\013\042\032\034\033\051\034\040" +
    "\035\046\036\044\037\052\040\033\041\043\042\037\043" +
    "\035\044\053\062\047\001\002\000\004\007\105\001\002" +
    "\000\034\013\042\032\034\033\051\034\040\035\046\036" +
    "\044\037\052\040\033\041\043\042\037\043\035\044\053" +
    "\062\047\001\002\000\004\031\107\001\002\000\014\007" +
    "\uffed\010\uffed\024\uffed\031\uffed\063\uffed\001\002\000\006" +
    "\023\055\027\057\001\002\000\004\031\112\001\002\000" +
    "\014\007\uffea\010\uffea\024\uffea\031\uffea\063\uffea\001\002" +
    "\000\004\010\114\001\002\000\004\005\115\001\002\000" +
    "\014\003\uffe5\010\uffe5\011\uffe5\017\uffe5\026\uffe5\001\002" +
    "\000\034\013\042\032\034\033\051\034\040\035\046\036" +
    "\044\037\052\040\033\041\043\042\037\043\035\044\053" +
    "\062\047\001\002\000\004\007\120\001\002\000\034\013" +
    "\042\032\034\033\051\034\040\035\046\036\044\037\052" +
    "\040\033\041\043\042\037\043\035\044\053\062\047\001" +
    "\002\000\004\031\122\001\002\000\014\007\uffef\010\uffef" +
    "\024\uffef\031\uffef\063\uffef\001\002\000\006\023\055\027" +
    "\057\001\002\000\004\031\125\001\002\000\014\007\uffe9" +
    "\010\uffe9\024\uffe9\031\uffe9\063\uffe9\001\002\000\006\023" +
    "\055\027\057\001\002\000\004\031\130\001\002\000\014" +
    "\007\uffe8\010\uffe8\024\uffe8\031\uffe8\063\uffe8\001\002\000" +
    "\034\013\042\032\034\033\051\034\040\035\046\036\044" +
    "\037\052\040\033\041\043\042\037\043\035\044\053\062" +
    "\047\001\002\000\004\007\133\001\002\000\034\013\042" +
    "\032\034\033\051\034\040\035\046\036\044\037\052\040" +
    "\033\041\043\042\037\043\035\044\053\062\047\001\002" +
    "\000\004\031\135\001\002\000\014\007\ufff1\010\ufff1\024" +
    "\ufff1\031\ufff1\063\ufff1\001\002\000\006\023\055\027\057" +
    "\001\002\000\004\031\140\001\002\000\014\007\uffeb\010" +
    "\uffeb\024\uffeb\031\uffeb\063\uffeb\001\002\000\004\022\143" +
    "\001\002\000\014\003\uffff\010\uffff\011\uffff\017\uffff\026" +
    "\uffff\001\002\000\004\002\000\001\002\000\004\006\145" +
    "\001\002\000\006\014\146\045\147\001\002\000\004\004" +
    "\165\001\002\000\004\004\150\001\002\000\036\012\153" +
    "\013\042\032\034\033\051\034\040\035\046\036\044\037" +
    "\052\040\033\041\043\042\037\043\035\044\053\062\047" +
    "\001\002\000\004\063\154\001\002\000\010\007\ufff4\010" +
    "\ufff4\063\ufff4\001\002\000\010\007\ufff5\010\ufff5\063\ufff5" +
    "\001\002\000\006\023\155\027\156\001\002\000\036\012" +
    "\050\013\042\032\034\033\051\034\040\035\046\036\044" +
    "\037\052\040\033\041\043\042\037\043\035\044\053\062" +
    "\047\001\002\000\004\062\162\001\002\000\004\010\160" +
    "\001\002\000\004\005\161\001\002\000\014\003\ufff8\010" +
    "\ufff8\011\ufff8\017\ufff8\026\ufff8\001\002\000\004\010\uffdd" +
    "\001\002\000\006\007\063\024\164\001\002\000\004\010" +
    "\uffde\001\002\000\036\012\153\013\042\032\034\033\051" +
    "\034\040\035\046\036\044\037\052\040\033\041\043\042" +
    "\037\043\035\044\053\062\047\001\002\000\006\007\ufff6" +
    "\010\ufff6\001\002\000\006\007\170\010\171\001\002\000" +
    "\036\012\153\013\042\032\034\033\051\034\040\035\046" +
    "\036\044\037\052\040\033\041\043\042\037\043\035\044" +
    "\053\062\047\001\002\000\004\005\172\001\002\000\014" +
    "\003\ufff9\010\ufff9\011\ufff9\017\ufff9\026\ufff9\001\002\000" +
    "\006\007\ufff7\010\ufff7\001\002\000\014\003\ufffb\010\ufffb" +
    "\011\ufffb\017\ufffb\026\ufffb\001\002\000\004\005\176\001" +
    "\002\000\014\003\ufffa\010\ufffa\011\ufffa\017\ufffa\026\ufffa" +
    "\001\002\000\006\020\020\025\022\001\002\000\004\006" +
    "\201\001\002\000\004\006\202\001\002\000\004\062\203" +
    "\001\002\000\004\021\204\001\002\000\036\012\153\013" +
    "\042\032\034\033\051\034\040\035\046\036\044\037\052" +
    "\040\033\041\043\042\037\043\035\044\053\062\047\001" +
    "\002\000\004\010\206\001\002\000\004\005\207\001\002" +
    "\000\014\003\uffe6\010\uffe6\011\uffe6\017\uffe6\026\uffe6\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\205\000\004\002\004\001\001\000\012\003\012\004" +
    "\010\005\013\011\014\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\004\141\005\013\011\014" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\020\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\010\044\013" +
    "\040\014\035\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\055\001" +
    "\001\000\010\010\044\013\061\014\035\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\010\044\014\064\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\066\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\071" +
    "\001\001\000\002\001\001\000\004\010\073\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\076\001\001" +
    "\000\002\001\001\000\004\010\100\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\103\001\001\000\002" +
    "\001\001\000\004\010\105\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\016\110\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\116\001\001\000\002\001\001" +
    "\000\004\010\120\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\123\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\016\126\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\131\001\001\000\002\001\001" +
    "\000\004\010\133\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\136\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\007\150\010\151\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\156\001\001\000\010\010\044\013\162\014\035\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\006\166\007\165\010\151\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\007\172\010" +
    "\151\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\177\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\007" +
    "\204\010\151\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String resultado = ""; 
    public ArrayList<valor> lista = new ArrayList<>();
    public static ArrayList<valor_variable> tabla_simbolos = new ArrayList<>();
    public ArrayList<Object> arrayVar = new ArrayList<>();
    public IdArrayListHashMap hashMap = new IdArrayListHashMap();
    public IdArrayListHashMap hashVarianza = new IdArrayListHashMap();
    //public static String titulog;
    public void syntax_error(Symbol s)
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Recuperado" );
            funciones.ErroresList.addErrorToList(s.right  , s.left, s.value.toString(), "SINTACTICO");
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Sin recuperacion." );
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {

  
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= PROGRAMPAL lista_instr FIN PROGRAMPAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // lista_instr ::= lista_instr instruccion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_instr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // lista_instr ::= instruccion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_instr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruccion ::= impresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruccion ::= variables 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruccion ::= error PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruccion ::= error FIN PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // impresion ::= CONSOLE DOSPUNTOS DOSPUNTOS PRINT IGUAL lista_expresion FIN PUNTOYCOMA 
            {
              Object RESULT =null;
		 
        System.out.print("!Salida: ");
        acumulador.addSalida("!Salida: ");
        for (valor v : lista) {
            System.out.print(v.resultado + "," );
            acumulador.addSalida(v.resultado + "," );    
        }
        lista.clear(); // Limpiar la lista después de imprimir
        System.out.println(" ");
        System.out.println("-------------------------------------------");
        acumulador.addToOutput("-------------------------------------------" ); 
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("impresion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // impresion ::= CONSOLE DOSPUNTOS DOSPUNTOS COLUMN IGUAL expresion GUIONREV ref_arreglo FIN PUNTOYCOMA 
            {
              Object RESULT =null;
		int titulogleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int titulogright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object titulog = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		
        System.out.println("-------"+ titulog + "-------");
        acumulador.addToOutput("------------------------------" );
        acumulador.addToOutput("        "+ titulog + "        ");
        acumulador.addToOutput("------------------------------" );
        lista.clear();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("impresion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // lista_expresion ::= lista_expresion COMA expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // lista_expresion ::= expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expresion ::= CADENA_F 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                valor elemento = new valor("string", "primitivo", a, null, a);
		lista.add(elemento);
                String valor_var= a;
                RESULT =valor_var;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expresion ::= aritmetica 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		           
                if (val instanceof Double) {
                    valor elemento = new valor("double", "primitivo", val.toString(), null, val.toString());
                    lista.add(elemento);
                    RESULT =val;
                } else if (val instanceof String) {
                    valor elemento = new valor("string", "primitivo", (String) val, null, (String) val);
                    lista.add(elemento);
                    RESULT =val;
                } else {
                    System.out.print("NO FUNCIONO");
                }
           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // aritmetica ::= NUMERO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                RESULT = Double.parseDouble(val);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aritmetica",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // aritmetica ::= PALABRA_I 
            {
              Object RESULT =null;
		int varbuscarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varbuscarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String varbuscar = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		           
                boolean variableExists = false;
                for (valor_variable variable : tabla_simbolos) {
                    if (variable.id.equalsIgnoreCase(varbuscar)) {
                        variableExists = true;
                        //System.out.println("variable encontrada");
                        if (variable.tipo.equals("cadena")) {
                            //System.out.println("es una cadena");
                            varbuscar= variable.valoract;
                            RESULT= varbuscar;
                        } else if (variable.tipo.equals("double")) {
                            // If tipo is "double", convert valoract to double
                            double valorDouble;
                            if (variable.valoract instanceof String) {
                                // de str a double
                                valorDouble = Double.parseDouble((String) variable.valoract);
                                RESULT=valorDouble;
                            } else {
                                // otros tipos
                                System.out.println("Unsupported data type for valoract: " + variable.valoract.getClass().getName());
                                break; // bai 
                            }
                        }
                        //RESULT = varbuscar;
                        break; // No need to continue searching once found
                    }
                }
                if (!variableExists) {
                    System.out.println("Variable " + varbuscar + " no existe en el programa.");
                    acumulador.addToOutput("Variable " + varbuscar + " no existe en el programa."); 
                }

           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aritmetica",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // aritmetica ::= SUMA ABRIRPARENTESIS aritmetica COMA aritmetica CERRARPARENTESIS 
            {
              Object RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object izq = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int derright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object der = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                        double result_s = (Double) izq + (Double) der;
                        RESULT = result_s; 
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aritmetica",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // aritmetica ::= RESTA ABRIRPARENTESIS aritmetica COMA aritmetica CERRARPARENTESIS 
            {
              Object RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object izq = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int derright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object der = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                        double result_s = (Double) izq - (Double) der;
                        RESULT = result_s; 
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aritmetica",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // aritmetica ::= MULTIPLICACION ABRIRPARENTESIS aritmetica COMA aritmetica CERRARPARENTESIS 
            {
              Object RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object izq = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int derright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object der = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                        double result_s = (Double) izq * (Double) der;
                        RESULT = result_s; 
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aritmetica",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // aritmetica ::= DIVISION ABRIRPARENTESIS aritmetica COMA aritmetica CERRARPARENTESIS 
            {
              Object RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object izq = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int derright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object der = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                        double result_s = (Double) izq / (Double) der;
                        RESULT = result_s; 
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aritmetica",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // aritmetica ::= MODULO ABRIRPARENTESIS aritmetica COMA aritmetica CERRARPARENTESIS 
            {
              Object RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object izq = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int derright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object der = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                        double result_s = (Double) izq % (Double) der;
                        RESULT = result_s; 
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aritmetica",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // aritmetica ::= MEDIA ABRIRPARENTESIS estadistica_arreglo CERRARPARENTESIS 
            {
              Object RESULT =null;
		int hashnomleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int hashnomright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object hashnom = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                        ArrayList<Object> retrievedArrayS = hashVarianza.getArrayListById(hashnom.toString());
                        hashVarianza.calculateMedian(retrievedArrayS);
                        double total = hashVarianza.calculateMean(retrievedArrayS);
                        //System.out.println(total);
                        RESULT = total;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aritmetica",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // aritmetica ::= MEDIANA ABRIRPARENTESIS estadistica_arreglo CERRARPARENTESIS 
            {
              Object RESULT =null;
		int hashnomleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int hashnomright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object hashnom = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                        ArrayList<Object> retrievedArrayS =hashVarianza.getArrayListById(hashnom.toString());
                        hashVarianza.calculateMedian(retrievedArrayS);
                        double total = hashVarianza.calculateMedian(retrievedArrayS);
                        //System.out.println(total);
                        RESULT = total;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aritmetica",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // aritmetica ::= MODA ABRIRPARENTESIS estadistica_arreglo CERRARPARENTESIS 
            {
              Object RESULT =null;
		int hashnomleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int hashnomright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object hashnom = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                        ArrayList<Object> retrievedArrayS =hashVarianza.getArrayListById(hashnom.toString());
                        hashVarianza.calculateMedian(retrievedArrayS);
                        double total = hashVarianza.calculateMode(retrievedArrayS);
                        //System.out.println(total);
                        RESULT = total;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aritmetica",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // aritmetica ::= VARIANZA ABRIRPARENTESIS estadistica_arreglo CERRARPARENTESIS 
            {
              Object RESULT =null;
		int hashnomleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int hashnomright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object hashnom = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                        ArrayList<Object> retrievedArrayS =hashVarianza.getArrayListById(hashnom.toString());
                        hashVarianza.calculateMedian(retrievedArrayS);
                        double total = hashVarianza.calculateVariance(retrievedArrayS);
                        //System.out.println(total);
                        RESULT = total;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aritmetica",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // aritmetica ::= MAX ABRIRPARENTESIS estadistica_arreglo CERRARPARENTESIS 
            {
              Object RESULT =null;
		int hashnomleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int hashnomright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object hashnom = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                        ArrayList<Object> retrievedArrayS =hashVarianza.getArrayListById(hashnom.toString());
                        hashVarianza.calculateMedian(retrievedArrayS);
                        double total = hashVarianza.calculateMax(retrievedArrayS);
                        //System.out.println(total);
                        RESULT = total;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aritmetica",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // aritmetica ::= MIN ABRIRPARENTESIS estadistica_arreglo CERRARPARENTESIS 
            {
              Object RESULT =null;
		int hashnomleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int hashnomright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object hashnom = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                        ArrayList<Object> retrievedArrayS =hashVarianza.getArrayListById(hashnom.toString());
                        hashVarianza.calculateMedian(retrievedArrayS);
                        double total = hashVarianza.calculateMin(retrievedArrayS);
                        //System.out.println(total);
                        RESULT = total;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aritmetica",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // variables ::= VAR DOSPUNTOS tipo DOSPUNTOS DOSPUNTOS PALABRA_I GUION expresion FIN PUNTOYCOMA 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int teidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int teidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String teid = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int val_varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int val_varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object val_var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                    if (tp == "double") {
                        valor_variable nueva_var = new valor_variable(teid.toString(), "double", val_var.toString(), null,  0,  0, val_var.toString());
                        tabla_simbolos.add(nueva_var);
                        lista.clear();
                        /*
                        for (valor_variable variable : tabla_simbolos) {
                            System.out.println("ID: " + variable.id);
                            System.out.println("valor: " + variable.valoract);
                            System.out.println("tipo: " + variable.tipo);
                        }*/

                        System.out.println("-------------------------------------------");
                    } else if (tp== "String") {
                        valor_variable nueva_var = new valor_variable(teid.toString(), "cadena", val_var.toString(), null, 0, 0, val_var.toString());
                        tabla_simbolos.add(nueva_var);
                        lista.clear();

                        /*
                        for (valor_variable variable : tabla_simbolos) {
                            System.out.println("ID: " + variable.id);
                            System.out.println("valor: " + variable.valoract);
                            System.out.println("tipo: " + variable.tipo);
                        }*/

                        System.out.println("-------------------------------------------");

                    } else {
                                System.out.println("ELEGIR UN VALOR VALIDO PARA CREAR LA VARIABLE");

                    }
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // variables ::= ARREGLO DOSPUNTOS tipo DOSPUNTOS DOSPUNTOS ARROBA PALABRA_I GUION ABRIRCORCHETES lista_arreglo CERRARCORCHETES FIN PUNTOYCOMA 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int teidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int teidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String teid = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int atleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int atright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object at = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		           
                    //System.out.println("DECLARAR ARREGLOS");
                    if (tp == "double") {
                        ArrayList<Object> arrayVarToInsert = new ArrayList<>(arrayVar); 
                        valor_variable nuevo_arr = new valor_variable(teid.toString(), "double", "arreglo", arrayVarToInsert,  0,  0, "arreglo");
                        tabla_simbolos.add(nuevo_arr);
                        hashMap.setArrayListById(teid.toString(), arrayVarToInsert);
                        
                        lista.clear();
                         /*   
                        System.out.println("ID: " + nuevo_arr.id);
                        System.out.println("tipo: " + nuevo_arr.tipo);
                        System.out.println("VALORES" );
                        for (Object value : nuevo_arr.valorArreglo) {
                            System.out.println(value);
                        }

                        
                        System.out.println("-------------------------------------------");
                        ArrayList<Object> retrievedArrayVar1 = hashMap.getArrayListById(teid.toString());
                        System.out.println("-------" + teid.toString()+"-------------");
                        System.out.println(retrievedArrayVar1);
                        */
                        arrayVar.clear();

                    } else if (tp== "String") {
                        ArrayList<Object> arrayVarToInsert = new ArrayList<>(arrayVar); 
                        valor_variable nuevo_arr = new valor_variable(teid.toString(), "cadena", "arreglo", arrayVarToInsert, 0, 0, "arreglo");
                        tabla_simbolos.add(nuevo_arr);
                        hashMap.setArrayListById(teid.toString(), arrayVarToInsert);
                        lista.clear();

                        /*
                        System.out.println("ID: " + nuevo_arr.id);
                        System.out.println("tipo: " + nuevo_arr.tipo);
                        System.out.println("VALORES" );
                        for (Object value : nuevo_arr.valorArreglo) {
                            System.out.println(value);
                        }*/

                        arrayVar.clear();

                        /*
                        System.out.println("-------------------------------------------");
                        System.out.println("-------------------------------------------");
                        ArrayList<Object> retrievedArrayVar1 = hashMap.getArrayListById(teid.toString());
                        System.out.println("-------" + teid.toString()+"-------------");
                        System.out.println(retrievedArrayVar1);*/

                    } else {
                                System.out.println("ELEGIR UN VALOR VALIDO PARA CREAR LA VARIABLE");
                    }
           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // tipo ::= DOUBLE 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                String tipo_s = "double";
                RESULT = tipo_s; 
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // tipo ::= CADENACHAR ABRIRCORCHETES CERRARCORCHETES 
            {
              Object RESULT =null;
		           
                String tipo_s = "String";
                RESULT = tipo_s; 
           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // lista_arreglo ::= lista_arreglo COMA arrVal 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_arreglo",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // lista_arreglo ::= arrVal 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_arreglo",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // arrVal ::= CADENA_F 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		arrayVar.add(a);
                String valor_var= a;
                RESULT =valor_var;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arrVal",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // arrVal ::= aritmetica 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		           
                if (val instanceof Double) {
                    arrayVar.add(val);
                    RESULT =val;
                } else if (val instanceof String) {
                    arrayVar.add(val);
                    RESULT =val;
                } else {
                    System.out.print("NO FUNCIONO");
                }
           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arrVal",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ref_arreglo ::= ABRIRCORCHETES lista_arreglo CERRARCORCHETES 
            {
              Object RESULT =null;
		int atleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int atright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object at = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        acumulador.addToOutput("--------------------"); 
        //si solo da una lista para imprimir
        for (Object obj : arrayVar) {
            System.out.println(obj);
            acumulador.addToOutput(obj.toString()); 
        }
        
 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ref_arreglo",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ref_arreglo ::= ARROBA PALABRA_I 
            {
              Object RESULT =null;
		int desleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int desright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String des = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        ArrayList<Object> retrievedArrayVar1 = hashMap.getArrayListById(des.toString());
        System.out.println("-------" + des.toString() +"-------------");
        acumulador.addToOutput("--------------------"); 
        for (Object item : retrievedArrayVar1) {
         System.out.println(item);
         acumulador.addToOutput(item.toString()); 
}

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ref_arreglo",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // estadistica_arreglo ::= ABRIRCORCHETES lista_arreglo CERRARCORCHETES 
            {
              Object RESULT =null;
		int atleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int atright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object at = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        String prueba = "prueba";
        ArrayList<Object> arrayVarEst = new ArrayList<>(arrayVar);
        hashVarianza.setArrayListById(prueba, arrayVarEst);
        arrayVar.clear();
        RESULT = prueba;

   
 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estadistica_arreglo",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // estadistica_arreglo ::= ARROBA PALABRA_I 
            {
              Object RESULT =null;
		int desleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int desright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String des = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        ArrayList<Object> retrievedArraySr = hashMap.getArrayListById(des.toString());
        String encontrada = des.toString();
        hashVarianza.setArrayListById(encontrada, retrievedArraySr);
        RESULT = encontrada;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estadistica_arreglo",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
