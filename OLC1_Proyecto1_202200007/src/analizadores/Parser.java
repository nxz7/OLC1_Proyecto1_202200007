
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import java_cup.runtime.*;
import java.util.LinkedList;
import funciones.token;
import funciones.valor;
import java.util.ArrayList;
import funciones.valor_variable;
import java.lang.reflect.Array;
import funciones.IdArrayListHashMap;
import java.util.ArrayList;
import java.util.HashMap;
import funciones.acumulador;
import funciones.graficos;
import java.awt.Color;
import java.io.StringReader;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\103\000\002\002\004\000\002\002\006\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\004\000\002\004\005\000" +
    "\002\005\012\000\002\005\014\000\002\006\005\000\002" +
    "\006\003\000\002\007\003\000\002\007\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\010\000\002\010\010" +
    "\000\002\010\010\000\002\010\010\000\002\010\010\000" +
    "\002\010\006\000\002\010\006\000\002\010\006\000\002" +
    "\010\006\000\002\010\006\000\002\010\006\000\002\011" +
    "\014\000\002\011\017\000\002\012\003\000\002\012\005" +
    "\000\002\013\005\000\002\013\003\000\002\014\003\000" +
    "\002\014\003\000\002\015\005\000\002\015\004\000\002" +
    "\016\005\000\002\016\004\000\002\017\014\000\002\017" +
    "\014\000\002\017\014\000\002\031\004\000\002\031\003" +
    "\000\002\030\014\000\002\030\014\000\002\030\014\000" +
    "\002\030\012\000\002\030\014\000\002\027\004\000\002" +
    "\027\003\000\002\026\014\000\002\026\012\000\002\026" +
    "\014\000\002\022\004\000\002\022\003\000\002\020\014" +
    "\000\002\020\012\000\002\021\003\000\002\021\003\000" +
    "\002\023\005\000\002\023\003\000\002\024\003\000\002" +
    "\024\003\000\002\025\005\000\002\025\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0114\000\004\022\004\001\002\000\020\003\017\011" +
    "\020\017\015\026\016\053\021\054\012\055\013\001\002" +
    "\000\004\002\006\001\002\000\004\002\001\001\002\000" +
    "\022\003\ufffd\010\ufffd\011\ufffd\017\ufffd\026\ufffd\053\ufffd" +
    "\054\ufffd\055\ufffd\001\002\000\022\003\ufffb\010\ufffb\011" +
    "\ufffb\017\ufffb\026\ufffb\053\ufffb\054\ufffb\055\ufffb\001\002" +
    "\000\022\003\017\010\u0114\011\020\017\015\026\016\053" +
    "\021\054\012\055\013\001\002\000\004\030\331\001\002" +
    "\000\004\030\274\001\002\000\022\003\ufffe\010\ufffe\011" +
    "\ufffe\017\ufffe\026\ufffe\053\ufffe\054\ufffe\055\ufffe\001\002" +
    "\000\004\006\263\001\002\000\004\006\243\001\002\000" +
    "\006\005\240\010\241\001\002\000\004\006\210\001\002" +
    "\000\004\030\023\001\002\000\022\003\ufffc\010\ufffc\011" +
    "\ufffc\017\ufffc\026\ufffc\053\ufffc\054\ufffc\055\ufffc\001\002" +
    "\000\010\047\024\050\025\051\026\001\002\000\004\006" +
    "\201\001\002\000\004\006\166\001\002\000\004\006\041" +
    "\001\002\000\012\046\032\047\024\050\025\051\026\001" +
    "\002\000\012\046\uffce\047\uffce\050\uffce\051\uffce\001\002" +
    "\000\012\046\uffcf\047\uffcf\050\uffcf\051\uffcf\001\002\000" +
    "\004\053\033\001\002\000\004\010\034\001\002\000\004" +
    "\005\035\001\002\000\004\031\036\001\002\000\004\010" +
    "\037\001\002\000\004\005\040\001\002\000\022\003\uffd8" +
    "\010\uffd8\011\uffd8\017\uffd8\026\uffd8\053\uffd8\054\uffd8\055" +
    "\uffd8\001\002\000\004\006\042\001\002\000\004\025\043" +
    "\001\002\000\004\023\044\001\002\000\004\024\045\001" +
    "\002\000\004\004\046\001\002\000\006\023\050\027\051" +
    "\001\002\000\004\010\164\001\002\000\036\012\070\013" +
    "\062\032\054\033\072\034\060\035\066\036\064\037\071" +
    "\040\053\041\063\042\057\043\055\044\073\062\067\001" +
    "\002\000\004\062\052\001\002\000\004\010\uffbf\001\002" +
    "\000\004\030\161\001\002\000\004\030\154\001\002\000" +
    "\004\030\151\001\002\000\006\007\146\024\147\001\002" +
    "\000\004\030\143\001\002\000\004\030\136\001\002\000" +
    "\006\007\uffc3\024\uffc3\001\002\000\014\007\ufff2\010\ufff2" +
    "\024\ufff2\031\ufff2\063\ufff2\001\002\000\004\030\133\001" +
    "\002\000\004\030\126\001\002\000\006\007\uffc1\024\uffc1" +
    "\001\002\000\004\030\121\001\002\000\014\007\ufff1\010" +
    "\ufff1\024\ufff1\031\ufff1\063\ufff1\001\002\000\006\007\uffc2" +
    "\024\uffc2\001\002\000\004\030\116\001\002\000\004\030" +
    "\111\001\002\000\004\030\074\001\002\000\006\023\075" +
    "\027\077\001\002\000\036\012\105\013\062\032\054\033" +
    "\072\034\060\035\066\036\064\037\071\040\053\041\063" +
    "\042\057\043\055\044\073\062\067\001\002\000\004\031" +
    "\101\001\002\000\004\062\100\001\002\000\004\031\uffda" +
    "\001\002\000\014\007\uffe6\010\uffe6\024\uffe6\031\uffe6\063" +
    "\uffe6\001\002\000\006\007\uffe0\024\uffe0\001\002\000\006" +
    "\007\106\024\107\001\002\000\006\007\uffde\024\uffde\001" +
    "\002\000\006\007\uffdf\024\uffdf\001\002\000\036\012\105" +
    "\013\062\032\054\033\072\034\060\035\066\036\064\037" +
    "\071\040\053\041\063\042\057\043\055\044\073\062\067" +
    "\001\002\000\004\031\uffdb\001\002\000\006\007\uffe1\024" +
    "\uffe1\001\002\000\034\013\062\032\054\033\072\034\060" +
    "\035\066\036\064\037\071\040\053\041\063\042\057\043" +
    "\055\044\073\062\067\001\002\000\004\007\113\001\002" +
    "\000\034\013\062\032\054\033\072\034\060\035\066\036" +
    "\064\037\071\040\053\041\063\042\057\043\055\044\073" +
    "\062\067\001\002\000\004\031\115\001\002\000\014\007" +
    "\uffef\010\uffef\024\uffef\031\uffef\063\uffef\001\002\000\006" +
    "\023\075\027\077\001\002\000\004\031\120\001\002\000" +
    "\014\007\uffeb\010\uffeb\024\uffeb\031\uffeb\063\uffeb\001\002" +
    "\000\034\013\062\032\054\033\072\034\060\035\066\036" +
    "\064\037\071\040\053\041\063\042\057\043\055\044\073" +
    "\062\067\001\002\000\004\007\123\001\002\000\034\013" +
    "\062\032\054\033\072\034\060\035\066\036\064\037\071" +
    "\040\053\041\063\042\057\043\055\044\073\062\067\001" +
    "\002\000\004\031\125\001\002\000\014\007\uffed\010\uffed" +
    "\024\uffed\031\uffed\063\uffed\001\002\000\034\013\062\032" +
    "\054\033\072\034\060\035\066\036\064\037\071\040\053" +
    "\041\063\042\057\043\055\044\073\062\067\001\002\000" +
    "\004\007\130\001\002\000\034\013\062\032\054\033\072" +
    "\034\060\035\066\036\064\037\071\040\053\041\063\042" +
    "\057\043\055\044\073\062\067\001\002\000\004\031\132" +
    "\001\002\000\014\007\uffec\010\uffec\024\uffec\031\uffec\063" +
    "\uffec\001\002\000\006\023\075\027\077\001\002\000\004" +
    "\031\135\001\002\000\014\007\uffe9\010\uffe9\024\uffe9\031" +
    "\uffe9\063\uffe9\001\002\000\034\013\062\032\054\033\072" +
    "\034\060\035\066\036\064\037\071\040\053\041\063\042" +
    "\057\043\055\044\073\062\067\001\002\000\004\007\140" +
    "\001\002\000\034\013\062\032\054\033\072\034\060\035" +
    "\066\036\064\037\071\040\053\041\063\042\057\043\055" +
    "\044\073\062\067\001\002\000\004\031\142\001\002\000" +
    "\014\007\uffee\010\uffee\024\uffee\031\uffee\063\uffee\001\002" +
    "\000\006\023\075\027\077\001\002\000\004\031\145\001" +
    "\002\000\014\007\uffe8\010\uffe8\024\uffe8\031\uffe8\063\uffe8" +
    "\001\002\000\036\012\070\013\062\032\054\033\072\034" +
    "\060\035\066\036\064\037\071\040\053\041\063\042\057" +
    "\043\055\044\073\062\067\001\002\000\004\010\uffc0\001" +
    "\002\000\006\007\uffc4\024\uffc4\001\002\000\006\023\075" +
    "\027\077\001\002\000\004\031\153\001\002\000\014\007" +
    "\uffe7\010\uffe7\024\uffe7\031\uffe7\063\uffe7\001\002\000\034" +
    "\013\062\032\054\033\072\034\060\035\066\036\064\037" +
    "\071\040\053\041\063\042\057\043\055\044\073\062\067" +
    "\001\002\000\004\007\156\001\002\000\034\013\062\032" +
    "\054\033\072\034\060\035\066\036\064\037\071\040\053" +
    "\041\063\042\057\043\055\044\073\062\067\001\002\000" +
    "\004\031\160\001\002\000\014\007\ufff0\010\ufff0\024\ufff0" +
    "\031\ufff0\063\ufff0\001\002\000\006\023\075\027\077\001" +
    "\002\000\004\031\163\001\002\000\014\007\uffea\010\uffea" +
    "\024\uffea\031\uffea\063\uffea\001\002\000\004\005\165\001" +
    "\002\000\012\046\uffcb\047\uffcb\050\uffcb\051\uffcb\001\002" +
    "\000\004\006\167\001\002\000\004\025\170\001\002\000" +
    "\004\023\171\001\002\000\004\024\172\001\002\000\004" +
    "\004\173\001\002\000\006\012\175\062\174\001\002\000" +
    "\004\010\uffc5\001\002\000\004\010\uffc6\001\002\000\004" +
    "\010\177\001\002\000\004\005\200\001\002\000\012\046" +
    "\uffcd\047\uffcd\050\uffcd\051\uffcd\001\002\000\004\006\202" +
    "\001\002\000\004\020\203\001\002\000\004\004\204\001" +
    "\002\000\006\023\050\027\051\001\002\000\004\010\206" +
    "\001\002\000\004\005\207\001\002\000\012\046\uffcc\047" +
    "\uffcc\050\uffcc\051\uffcc\001\002\000\004\006\211\001\002" +
    "\000\006\014\212\045\213\001\002\000\004\004\231\001" +
    "\002\000\004\004\214\001\002\000\036\012\217\013\062" +
    "\032\054\033\072\034\060\035\066\036\064\037\071\040" +
    "\053\041\063\042\057\043\055\044\073\062\067\001\002" +
    "\000\004\063\220\001\002\000\010\007\ufff3\010\ufff3\063" +
    "\ufff3\001\002\000\010\007\ufff4\010\ufff4\063\ufff4\001\002" +
    "\000\006\023\221\027\222\001\002\000\036\012\105\013" +
    "\062\032\054\033\072\034\060\035\066\036\064\037\071" +
    "\040\053\041\063\042\057\043\055\044\073\062\067\001" +
    "\002\000\004\062\226\001\002\000\004\010\224\001\002" +
    "\000\004\005\225\001\002\000\022\003\ufff7\010\ufff7\011" +
    "\ufff7\017\ufff7\026\ufff7\053\ufff7\054\ufff7\055\ufff7\001\002" +
    "\000\004\010\uffdc\001\002\000\006\007\106\024\230\001" +
    "\002\000\004\010\uffdd\001\002\000\036\012\217\013\062" +
    "\032\054\033\072\034\060\035\066\036\064\037\071\040" +
    "\053\041\063\042\057\043\055\044\073\062\067\001\002" +
    "\000\006\007\ufff5\010\ufff5\001\002\000\006\007\234\010" +
    "\235\001\002\000\036\012\217\013\062\032\054\033\072" +
    "\034\060\035\066\036\064\037\071\040\053\041\063\042" +
    "\057\043\055\044\073\062\067\001\002\000\004\005\236" +
    "\001\002\000\022\003\ufff8\010\ufff8\011\ufff8\017\ufff8\026" +
    "\ufff8\053\ufff8\054\ufff8\055\ufff8\001\002\000\006\007\ufff6" +
    "\010\ufff6\001\002\000\022\003\ufffa\010\ufffa\011\ufffa\017" +
    "\ufffa\026\ufffa\053\ufffa\054\ufffa\055\ufffa\001\002\000\004" +
    "\005\242\001\002\000\022\003\ufff9\010\ufff9\011\ufff9\017" +
    "\ufff9\026\ufff9\053\ufff9\054\ufff9\055\ufff9\001\002\000\006" +
    "\020\244\025\246\001\002\000\004\006\uffe3\001\002\000" +
    "\004\006\251\001\002\000\004\023\247\001\002\000\004" +
    "\024\250\001\002\000\004\006\uffe2\001\002\000\004\006" +
    "\252\001\002\000\004\027\253\001\002\000\004\062\254" +
    "\001\002\000\004\021\255\001\002\000\004\023\256\001" +
    "\002\000\036\012\105\013\062\032\054\033\072\034\060" +
    "\035\066\036\064\037\071\040\053\041\063\042\057\043" +
    "\055\044\073\062\067\001\002\000\006\007\106\024\260" +
    "\001\002\000\004\010\261\001\002\000\004\005\262\001" +
    "\002\000\022\003\uffe4\010\uffe4\011\uffe4\017\uffe4\026\uffe4" +
    "\053\uffe4\054\uffe4\055\uffe4\001\002\000\006\020\244\025" +
    "\246\001\002\000\004\006\265\001\002\000\004\006\266" +
    "\001\002\000\004\062\267\001\002\000\004\021\270\001" +
    "\002\000\036\012\217\013\062\032\054\033\072\034\060" +
    "\035\066\036\064\037\071\040\053\041\063\042\057\043" +
    "\055\044\073\062\067\001\002\000\004\010\272\001\002" +
    "\000\004\005\273\001\002\000\022\003\uffe5\010\uffe5\011" +
    "\uffe5\017\uffe5\026\uffe5\053\uffe5\054\uffe5\055\uffe5\001\002" +
    "\000\006\047\275\050\276\001\002\000\004\006\322\001" +
    "\002\000\004\006\311\001\002\000\010\046\uffc9\047\uffc9" +
    "\050\uffc9\001\002\000\010\046\302\047\275\050\276\001" +
    "\002\000\010\046\uffca\047\uffca\050\uffca\001\002\000\004" +
    "\055\303\001\002\000\004\010\304\001\002\000\004\005" +
    "\305\001\002\000\004\031\306\001\002\000\004\010\307" +
    "\001\002\000\004\005\310\001\002\000\022\003\uffd9\010" +
    "\uffd9\011\uffd9\017\uffd9\026\uffd9\053\uffd9\054\uffd9\055\uffd9" +
    "\001\002\000\004\006\312\001\002\000\004\025\313\001" +
    "\002\000\004\023\314\001\002\000\004\024\315\001\002" +
    "\000\004\004\316\001\002\000\006\012\175\062\174\001" +
    "\002\000\004\010\320\001\002\000\004\005\321\001\002" +
    "\000\010\046\uffc8\047\uffc8\050\uffc8\001\002\000\004\006" +
    "\323\001\002\000\004\020\324\001\002\000\004\004\325" +
    "\001\002\000\006\023\050\027\051\001\002\000\004\010" +
    "\327\001\002\000\004\005\330\001\002\000\010\046\uffc7" +
    "\047\uffc7\050\uffc7\001\002\000\014\050\332\056\340\057" +
    "\337\060\334\061\333\001\002\000\004\006\u010b\001\002" +
    "\000\004\006\u0102\001\002\000\004\006\371\001\002\000" +
    "\016\046\uffd5\050\uffd5\056\uffd5\057\uffd5\060\uffd5\061\uffd5" +
    "\001\002\000\016\046\361\050\332\056\340\057\337\060" +
    "\334\061\333\001\002\000\004\006\352\001\002\000\004" +
    "\006\341\001\002\000\004\006\342\001\002\000\004\025" +
    "\343\001\002\000\004\023\344\001\002\000\004\024\345" +
    "\001\002\000\004\004\346\001\002\000\006\023\050\027" +
    "\051\001\002\000\004\010\350\001\002\000\004\005\351" +
    "\001\002\000\016\046\uffd0\050\uffd0\056\uffd0\057\uffd0\060" +
    "\uffd0\061\uffd0\001\002\000\004\006\353\001\002\000\004" +
    "\020\354\001\002\000\004\004\355\001\002\000\006\023" +
    "\050\027\051\001\002\000\004\010\357\001\002\000\004" +
    "\005\360\001\002\000\016\046\uffd1\050\uffd1\056\uffd1\057" +
    "\uffd1\060\uffd1\061\uffd1\001\002\000\004\054\363\001\002" +
    "\000\016\046\uffd6\050\uffd6\056\uffd6\057\uffd6\060\uffd6\061" +
    "\uffd6\001\002\000\004\010\364\001\002\000\004\005\365" +
    "\001\002\000\004\031\366\001\002\000\004\010\367\001" +
    "\002\000\004\005\370\001\002\000\022\003\uffd7\010\uffd7" +
    "\011\uffd7\017\uffd7\026\uffd7\053\uffd7\054\uffd7\055\uffd7\001" +
    "\002\000\004\006\372\001\002\000\004\025\373\001\002" +
    "\000\004\023\374\001\002\000\004\024\375\001\002\000" +
    "\004\004\376\001\002\000\006\012\175\062\174\001\002" +
    "\000\004\010\u0100\001\002\000\004\005\u0101\001\002\000" +
    "\016\046\uffd3\050\uffd3\056\uffd3\057\uffd3\060\uffd3\061\uffd3" +
    "\001\002\000\004\006\u0103\001\002\000\004\025\u0104\001" +
    "\002\000\004\023\u0105\001\002\000\004\024\u0106\001\002" +
    "\000\004\004\u0107\001\002\000\006\012\175\062\174\001" +
    "\002\000\004\010\u0109\001\002\000\004\005\u010a\001\002" +
    "\000\016\046\uffd2\050\uffd2\056\uffd2\057\uffd2\060\uffd2\061" +
    "\uffd2\001\002\000\004\006\u010c\001\002\000\004\025\u010d" +
    "\001\002\000\004\023\u010e\001\002\000\004\024\u010f\001" +
    "\002\000\004\004\u0110\001\002\000\006\012\175\062\174" +
    "\001\002\000\004\010\u0112\001\002\000\004\005\u0113\001" +
    "\002\000\016\046\uffd4\050\uffd4\056\uffd4\057\uffd4\060\uffd4" +
    "\061\uffd4\001\002\000\004\022\u0116\001\002\000\022\003" +
    "\uffff\010\uffff\011\uffff\017\uffff\026\uffff\053\uffff\054\uffff" +
    "\055\uffff\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0114\000\004\002\004\001\001\000\014\003\010\004" +
    "\013\005\006\011\021\017\007\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\004\u0114\005\006\011\021\017\007\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\026\027\027" +
    "\026\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\026\030\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\025\046\001\001\000\002\001\001\000\010\010\064" +
    "\023\055\024\060\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\075\001\001\000\010\010" +
    "\103\013\102\014\101\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\010\103\014\107\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\111\001\001\000\002\001\001" +
    "\000\004\010\113\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\116\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\121\001\001\000\002\001\001\000" +
    "\004\010\123\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\126\001\001\000\002\001\001\000\004\010" +
    "\130\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\133\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\136\001\001\000\002\001\001\000\004\010\140" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\016" +
    "\143\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\010\064\024\147\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\151\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\154\001\001\000\002\001\001\000" +
    "\004\010\156\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\161\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\021\175\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\025\204\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\007" +
    "\214\010\215\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\222\001\001\000\010\010" +
    "\103\013\226\014\101\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\006\232" +
    "\007\231\010\215\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\007\236\010\215\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\244\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\010\103\013\256\014\101\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\263\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\007" +
    "\270\010\215\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\020\276\022\277\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\300\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\316\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\025\325\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\030\334\031\335\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\030\361\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\025\346\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\025" +
    "\355\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\376\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\021\u0107\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\021\u0110\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String resultado = ""; 
    public ArrayList<valor> lista = new ArrayList<>();
    public static ArrayList<valor_variable> tabla_simbolos = new ArrayList<>();
    public ArrayList<Object> arrayVar = new ArrayList<>();
    public ArrayList<Object> variable_g = new ArrayList<>();


    public ArrayList<Object> arrayGraf = new ArrayList<>();

    public ArrayList<Object> valoresPie = new ArrayList<>();
    public ArrayList<Object> labelPie = new ArrayList<>();

    public ArrayList<Object> eje_x = new ArrayList<>();
    public ArrayList<Object> eje_y = new ArrayList<>();

    public IdArrayListHashMap hashMap = new IdArrayListHashMap();
    public IdArrayListHashMap hashVarianza = new IdArrayListHashMap();
    public IdArrayListHashMap hashgrafico= new IdArrayListHashMap();
    public String titulo_strg;
    public static String titulo_final;
    public static String titulo_pie;
    public static String nombre_arList = "nada";

    public static String titulo_line;
    public static String titulox_line;
    public static String tituloy_line;

    //public static String titulog;
    public void syntax_error(Symbol s)
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Recuperado" );
            funciones.ErroresList.addErrorToList(s.right  , s.left, s.value.toString(), "SINTACTICO");
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Sin recuperacion." );
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {

  
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= PROGRAMPAL lista_instr FIN PROGRAMPAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // lista_instr ::= lista_instr instruccion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_instr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // lista_instr ::= instruccion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_instr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruccion ::= impresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruccion ::= variables 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruccion ::= graficos_inst 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruccion ::= error PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruccion ::= error FIN PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // impresion ::= CONSOLE DOSPUNTOS DOSPUNTOS PRINT IGUAL lista_expresion FIN PUNTOYCOMA 
            {
              Object RESULT =null;
		 
        System.out.print("!Salida: ");
        acumulador.addSalida("!Salida: ");
        for (valor v : lista) {
            System.out.print(v.resultado + "," );
            acumulador.addSalida(v.resultado + "," );    
        }
        lista.clear(); // Limpiar la lista después de imprimir
        System.out.println(" ");
        System.out.println("-------------------------------------------");
        acumulador.addToOutput("-------------------------------------------" ); 
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("impresion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // impresion ::= CONSOLE DOSPUNTOS DOSPUNTOS COLUMN IGUAL expresion GUIONREV ref_arreglo FIN PUNTOYCOMA 
            {
              Object RESULT =null;
		int titulogleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int titulogright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object titulog = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		
        System.out.println("-------"+ titulog + "-------");
        acumulador.addToOutput("------------------------------" );
        acumulador.addToOutput("        "+ titulog + "        ");
        acumulador.addToOutput("------------------------------" );
        lista.clear();
//arrayvar.clear prueba
        arrayVar.clear();
        nombre_arList = "nada";
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("impresion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // lista_expresion ::= lista_expresion COMA expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // lista_expresion ::= expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expresion ::= CADENA_F 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                valor elemento = new valor("string", "primitivo", a, null, a);
		lista.add(elemento);
                String valor_var= a;
                RESULT =valor_var;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expresion ::= aritmetica 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		           
                if (val instanceof Double) {
                    valor elemento = new valor("double", "primitivo", val.toString(), null, val.toString());
                    lista.add(elemento);
                    RESULT =val;
                } else if (val instanceof String) {
                    valor elemento = new valor("string", "primitivo", (String) val, null, (String) val);
                    lista.add(elemento);
                    RESULT =val;
                } else {
                    System.out.print("NO FUNCIONO");
                }
           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // aritmetica ::= NUMERO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                RESULT = Double.parseDouble(val);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aritmetica",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // aritmetica ::= PALABRA_I 
            {
              Object RESULT =null;
		int varbuscarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varbuscarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String varbuscar = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		           
                boolean variableExists = false;
                for (valor_variable variable : tabla_simbolos) {
                    if (variable.id.equalsIgnoreCase(varbuscar)) {
                        variableExists = true;
                        //System.out.println("variable encontrada");
                        if (variable.tipo.equals("cadena")) {
                            //System.out.println("es una cadena");
                            varbuscar= variable.valoract;
                            RESULT= varbuscar;
                        } else if (variable.tipo.equals("double")) {
                            // If tipo is "double", convert valoract to double
                            double valorDouble;
                            if (variable.valoract instanceof String) {
                                // de str a double
                                valorDouble = Double.parseDouble((String) variable.valoract);
                                RESULT=valorDouble;
                            } else {
                                // otros tipos
                                System.out.println("Unsupported data type for valoract: " + variable.valoract.getClass().getName());
                                break; // bai 
                            }
                        }
                        //RESULT = varbuscar;
                        break; // No need to continue searching once found
                    }
                }
                if (!variableExists) {
                    System.out.println("Variable " + varbuscar + " no existe en el programa.");
                    acumulador.addToOutput("Variable " + varbuscar + " no existe en el programa."); 
                }

           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aritmetica",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // aritmetica ::= SUMA ABRIRPARENTESIS aritmetica COMA aritmetica CERRARPARENTESIS 
            {
              Object RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object izq = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int derright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object der = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                        double result_s = (Double) izq + (Double) der;
                        RESULT = result_s; 
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aritmetica",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // aritmetica ::= RESTA ABRIRPARENTESIS aritmetica COMA aritmetica CERRARPARENTESIS 
            {
              Object RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object izq = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int derright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object der = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                        double result_s = (Double) izq - (Double) der;
                        RESULT = result_s; 
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aritmetica",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // aritmetica ::= MULTIPLICACION ABRIRPARENTESIS aritmetica COMA aritmetica CERRARPARENTESIS 
            {
              Object RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object izq = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int derright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object der = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                        double result_s = (Double) izq * (Double) der;
                        RESULT = result_s; 
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aritmetica",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // aritmetica ::= DIVISION ABRIRPARENTESIS aritmetica COMA aritmetica CERRARPARENTESIS 
            {
              Object RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object izq = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int derright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object der = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                        double result_s = (Double) izq / (Double) der;
                        RESULT = result_s; 
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aritmetica",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // aritmetica ::= MODULO ABRIRPARENTESIS aritmetica COMA aritmetica CERRARPARENTESIS 
            {
              Object RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object izq = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int derright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object der = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                        double result_s = (Double) izq % (Double) der;
                        RESULT = result_s; 
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aritmetica",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // aritmetica ::= MEDIA ABRIRPARENTESIS estadistica_arreglo CERRARPARENTESIS 
            {
              Object RESULT =null;
		int hashnomleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int hashnomright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object hashnom = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                        ArrayList<Object> retrievedArrayS = hashVarianza.getArrayListById(hashnom.toString());
                        hashVarianza.calculateMedian(retrievedArrayS);
                        double total = hashVarianza.calculateMean(retrievedArrayS);
                        //System.out.println(total);
                        RESULT = total;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aritmetica",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // aritmetica ::= MEDIANA ABRIRPARENTESIS estadistica_arreglo CERRARPARENTESIS 
            {
              Object RESULT =null;
		int hashnomleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int hashnomright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object hashnom = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                        ArrayList<Object> retrievedArrayS =hashVarianza.getArrayListById(hashnom.toString());
                        hashVarianza.calculateMedian(retrievedArrayS);
                        double total = hashVarianza.calculateMedian(retrievedArrayS);
                        //System.out.println(total);
                        RESULT = total;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aritmetica",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // aritmetica ::= MODA ABRIRPARENTESIS estadistica_arreglo CERRARPARENTESIS 
            {
              Object RESULT =null;
		int hashnomleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int hashnomright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object hashnom = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                        ArrayList<Object> retrievedArrayS =hashVarianza.getArrayListById(hashnom.toString());
                        hashVarianza.calculateMedian(retrievedArrayS);
                        double total = hashVarianza.calculateMode(retrievedArrayS);
                        //System.out.println(total);
                        RESULT = total;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aritmetica",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // aritmetica ::= VARIANZA ABRIRPARENTESIS estadistica_arreglo CERRARPARENTESIS 
            {
              Object RESULT =null;
		int hashnomleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int hashnomright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object hashnom = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                        ArrayList<Object> retrievedArrayS =hashVarianza.getArrayListById(hashnom.toString());
                        hashVarianza.calculateMedian(retrievedArrayS);
                        double total = hashVarianza.calculateVariance(retrievedArrayS);
                        //System.out.println(total);
                        RESULT = total;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aritmetica",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // aritmetica ::= MAX ABRIRPARENTESIS estadistica_arreglo CERRARPARENTESIS 
            {
              Object RESULT =null;
		int hashnomleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int hashnomright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object hashnom = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                        ArrayList<Object> retrievedArrayS =hashVarianza.getArrayListById(hashnom.toString());
                        hashVarianza.calculateMedian(retrievedArrayS);
                        double total = hashVarianza.calculateMax(retrievedArrayS);
                        //System.out.println(total);
                        RESULT = total;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aritmetica",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // aritmetica ::= MIN ABRIRPARENTESIS estadistica_arreglo CERRARPARENTESIS 
            {
              Object RESULT =null;
		int hashnomleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int hashnomright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object hashnom = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                        ArrayList<Object> retrievedArrayS =hashVarianza.getArrayListById(hashnom.toString());
                        hashVarianza.calculateMedian(retrievedArrayS);
                        double total = hashVarianza.calculateMin(retrievedArrayS);
                        //System.out.println(total);
                        RESULT = total;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aritmetica",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // variables ::= VAR DOSPUNTOS tipo DOSPUNTOS DOSPUNTOS PALABRA_I GUION expresion FIN PUNTOYCOMA 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int teidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int teidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String teid = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int val_varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int val_varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object val_var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                    if (tp == "double") {
                        valor_variable nueva_var = new valor_variable(teid.toString(), "double", val_var.toString(), null,  0,  0, val_var.toString());
                        tabla_simbolos.add(nueva_var);
                        lista.clear();
                        /*
                        for (valor_variable variable : tabla_simbolos) {
                            System.out.println("ID: " + variable.id);
                            System.out.println("valor: " + variable.valoract);
                            System.out.println("tipo: " + variable.tipo);
                        }*/

                        System.out.println("-------------------------------------------");
                        nombre_arList = "nada";
                    } else if (tp== "String") {
                        valor_variable nueva_var = new valor_variable(teid.toString(), "cadena", val_var.toString(), null, 0, 0, val_var.toString());
                        tabla_simbolos.add(nueva_var);
                        lista.clear();

                        /*
                        for (valor_variable variable : tabla_simbolos) {
                            System.out.println("ID: " + variable.id);
                            System.out.println("valor: " + variable.valoract);
                            System.out.println("tipo: " + variable.tipo);
                        }*/

                        System.out.println("-------------------------------------------");
                        nombre_arList = "nada";
                    } else {
                                System.out.println("ELEGIR UN VALOR VALIDO PARA CREAR LA VARIABLE");
                                nombre_arList = "nada";

                    }
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // variables ::= ARREGLO DOSPUNTOS tipo DOSPUNTOS DOSPUNTOS ARROBA PALABRA_I GUION ABRIRCORCHETES lista_arreglo CERRARCORCHETES FIN PUNTOYCOMA 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int teidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int teidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String teid = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int atleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int atright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object at = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		           
                    //System.out.println("DECLARAR ARREGLOS");
                    if (tp == "double") {
                        ArrayList<Object> arrayVarToInsert = new ArrayList<>(arrayVar); 
                        valor_variable nuevo_arr = new valor_variable(teid.toString(), "double", "arreglo", arrayVarToInsert,  0,  0, "arreglo");
                        tabla_simbolos.add(nuevo_arr);
                        hashMap.setArrayListById(teid.toString(), arrayVarToInsert);
                        
                        lista.clear();
                         /*   
                        System.out.println("ID: " + nuevo_arr.id);
                        System.out.println("tipo: " + nuevo_arr.tipo);
                        System.out.println("VALORES" );
                        for (Object value : nuevo_arr.valorArreglo) {
                            System.out.println(value);
                        }

                        
                        System.out.println("-------------------------------------------");
                        ArrayList<Object> retrievedArrayVar1 = hashMap.getArrayListById(teid.toString());
                        System.out.println("-------" + teid.toString()+"-------------");
                        System.out.println(retrievedArrayVar1);
                        */
                        arrayVar.clear();
                        nombre_arList = "nada";
                    } else if (tp== "String") {
                        ArrayList<Object> arrayVarToInsert = new ArrayList<>(arrayVar); 
                        valor_variable nuevo_arr = new valor_variable(teid.toString(), "cadena", "arreglo", arrayVarToInsert, 0, 0, "arreglo");
                        tabla_simbolos.add(nuevo_arr);
                        hashMap.setArrayListById(teid.toString(), arrayVarToInsert);
                        lista.clear();
                        nombre_arList = "nada";
                        /*
                        System.out.println("ID: " + nuevo_arr.id);
                        System.out.println("tipo: " + nuevo_arr.tipo);
                        System.out.println("VALORES" );
                        for (Object value : nuevo_arr.valorArreglo) {
                            System.out.println(value);
                        }*/

                        arrayVar.clear();

                        /*
                        System.out.println("-------------------------------------------");
                        System.out.println("-------------------------------------------");
                        ArrayList<Object> retrievedArrayVar1 = hashMap.getArrayListById(teid.toString());
                        System.out.println("-------" + teid.toString()+"-------------");
                        System.out.println(retrievedArrayVar1);*/

                    } else {
                                System.out.println("ELEGIR UN VALOR VALIDO PARA CREAR LA VARIABLE");
                    }
           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // tipo ::= DOUBLE 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                String tipo_s = "double";
                RESULT = tipo_s; 
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // tipo ::= CADENACHAR ABRIRCORCHETES CERRARCORCHETES 
            {
              Object RESULT =null;
		           
                String tipo_s = "String";
                RESULT = tipo_s; 
           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // lista_arreglo ::= lista_arreglo COMA arrVal 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_arreglo",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // lista_arreglo ::= arrVal 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_arreglo",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // arrVal ::= CADENA_F 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		arrayVar.add(a);
                String valor_var= a;
                RESULT =valor_var;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arrVal",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // arrVal ::= aritmetica 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		           
                if (val instanceof Double) {
                    arrayVar.add(val);
                    RESULT =val;
                } else if (val instanceof String) {
                    arrayVar.add(val);
                    RESULT =val;
                } else {
                    System.out.print("NO FUNCIONO");
                }
           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arrVal",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ref_arreglo ::= ABRIRCORCHETES lista_arreglo CERRARCORCHETES 
            {
              Object RESULT =null;
		int atleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int atright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object at = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        acumulador.addToOutput("--------------------"); 
        //si solo da una lista para imprimir
        for (Object obj : arrayVar) {
            System.out.println(obj);
            acumulador.addToOutput(obj.toString()); 
        }
        
 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ref_arreglo",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ref_arreglo ::= ARROBA PALABRA_I 
            {
              Object RESULT =null;
		int desleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int desright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String des = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
         nombre_arList = des.toString();
        ArrayList<Object> retrievedArrayVar1 = hashMap.getArrayListById(des.toString());
        System.out.println("-------" + des.toString() +"-------------");
        acumulador.addToOutput("--------------------"); 
        for (Object item : retrievedArrayVar1) {
         System.out.println(item);
         acumulador.addToOutput(item.toString()); 
        }
        RESULT = nombre_arList;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ref_arreglo",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // estadistica_arreglo ::= ABRIRCORCHETES lista_arreglo CERRARCORCHETES 
            {
              Object RESULT =null;
		int atleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int atright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object at = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        String prueba = "prueba";
        ArrayList<Object> arrayVarEst = new ArrayList<>(arrayVar);
        
        hashVarianza.setArrayListById(prueba, arrayVarEst);
        arrayVar.clear();
        RESULT = prueba;

   
 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estadistica_arreglo",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // estadistica_arreglo ::= ARROBA PALABRA_I 
            {
              Object RESULT =null;
		int desleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int desright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String des = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        //nombre_arList = des.toString();
        ArrayList<Object> retrievedArraySr = hashMap.getArrayListById(des.toString());
        String encontrada = des.toString();
        hashVarianza.setArrayListById(encontrada, retrievedArraySr);
        RESULT = encontrada;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estadistica_arreglo",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // graficos_inst ::= HISTOGRAM ABRIRPARENTESIS instr_grafo EXEC HISTOGRAM FIN PUNTOYCOMA CERRARPARENTESIS FIN PUNTOYCOMA 
            {
              Object RESULT =null;
		         
            graficos.createHistogram(titulo_final.toString(), arrayGraf, Color.RED);
            acumulador.addToOutput("----> HISTOGRAMA CREADO CORRECTAMENTE" );
            arrayGraf.clear();
            acumulador.addToOutput("-------------> HISTOGRAMA CREADO ");
    

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graficos_inst",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // graficos_inst ::= GRAPHPIE ABRIRPARENTESIS instr_pie EXEC GRAPHPIE FIN PUNTOYCOMA CERRARPARENTESIS FIN PUNTOYCOMA 
            {
              Object RESULT =null;
		
        graficos.createPieGraph(titulo_pie.toString(), labelPie, valoresPie, Color.GRAY);
        labelPie.clear();
        valoresPie.clear();
        acumulador.addToOutput("-------------> PIE PIE PIE!");


              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graficos_inst",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // graficos_inst ::= GRAPHLINE ABRIRPARENTESIS instr_line EXEC GRAPHLINE FIN PUNTOYCOMA CERRARPARENTESIS FIN PUNTOYCOMA 
            {
              Object RESULT =null;
		

        graficos.createLineGraph(titulo_line, titulox_line, tituloy_line, eje_x, eje_y, Color.BLUE);
        acumulador.addToOutput("-------------> GRAFICA LINEA CREADA");
        eje_x.clear();
        eje_y.clear();

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graficos_inst",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // instr_line ::= instr_line datos_line 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr_line",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // instr_line ::= datos_line 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr_line",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // datos_line ::= TITULO DOSPUNTOS DOSPUNTOS CADENACHAR ABRIRCORCHETES CERRARCORCHETES IGUAL titulo_str FIN PUNTOYCOMA 
            {
              Object RESULT =null;
		int titulo_gleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int titulo_gright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object titulo_g = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
    titulo_line = titulo_g.toString();
    RESULT = titulo_line ;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("datos_line",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // datos_line ::= TITULOX DOSPUNTOS DOSPUNTOS CADENACHAR ABRIRCORCHETES CERRARCORCHETES IGUAL titulo_str FIN PUNTOYCOMA 
            {
              Object RESULT =null;
		int titulo_gleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int titulo_gright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object titulo_g = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
    titulox_line = titulo_g.toString();
    RESULT = titulox_line;


              CUP$Parser$result = parser.getSymbolFactory().newSymbol("datos_line",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // datos_line ::= TITULOY DOSPUNTOS DOSPUNTOS CADENACHAR ABRIRCORCHETES CERRARCORCHETES IGUAL titulo_str FIN PUNTOYCOMA 
            {
              Object RESULT =null;
		int titulo_gleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int titulo_gright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object titulo_g = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
    tituloy_line = titulo_g.toString();
    RESULT = tituloy_line;


              CUP$Parser$result = parser.getSymbolFactory().newSymbol("datos_line",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // datos_line ::= EJEY DOSPUNTOS DOSPUNTOS DOUBLE IGUAL ref_grafoarr FIN PUNTOYCOMA 
            {
              Object RESULT =null;
		int trleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int trright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object tr = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
            if (!nombre_arList.equals("nada")) {
                ArrayList<Object> array_line = hashMap.getArrayListById(nombre_arList.toString());
                eje_y.addAll(array_line);
                variable_g.clear();
                nombre_arList = "nada";
            } else {
                ArrayList<Object> array_line = new ArrayList<>(variable_g);
                eje_y.addAll(array_line);
                variable_g.clear();
            }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("datos_line",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // datos_line ::= EJEX DOSPUNTOS DOSPUNTOS CADENACHAR ABRIRCORCHETES CERRARCORCHETES IGUAL ref_grafoarr FIN PUNTOYCOMA 
            {
              Object RESULT =null;
		int trleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int trright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object tr = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
            if (!nombre_arList.equals("nada")) {
                ArrayList<Object> array_line_str = hashMap.getArrayListById(nombre_arList.toString());
                eje_x.addAll(array_line_str);
                variable_g.clear();
                nombre_arList = "nada";
            } else {
                ArrayList<Object> array_line_str = new ArrayList<>(variable_g);
                eje_x.addAll(array_line_str);
                variable_g.clear();
            }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("datos_line",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // instr_pie ::= instr_pie datos_pie 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr_pie",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // instr_pie ::= datos_pie 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr_pie",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // datos_pie ::= TITULO DOSPUNTOS DOSPUNTOS CADENACHAR ABRIRCORCHETES CERRARCORCHETES IGUAL titulo_str FIN PUNTOYCOMA 
            {
              Object RESULT =null;
		int titulo_gleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int titulo_gright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object titulo_g = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
    titulo_pie = titulo_g.toString();
    System.out.println("TITULO");
    RESULT = titulo_pie ;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("datos_pie",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // datos_pie ::= VALUES DOSPUNTOS DOSPUNTOS DOUBLE IGUAL ref_grafoarr FIN PUNTOYCOMA 
            {
              Object RESULT =null;
		int trleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int trright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object tr = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
            if (!nombre_arList.equals("nada")) {
                ArrayList<Object> array_Pie = hashMap.getArrayListById(nombre_arList.toString());
                valoresPie.addAll(array_Pie);
                variable_g.clear();
                nombre_arList = "nada";
            } else {
                ArrayList<Object> array_Pie = new ArrayList<>(variable_g);
                valoresPie.addAll(array_Pie);
                variable_g.clear();
            }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("datos_pie",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // datos_pie ::= LABEL DOSPUNTOS DOSPUNTOS CADENACHAR ABRIRCORCHETES CERRARCORCHETES IGUAL ref_grafoarr FIN PUNTOYCOMA 
            {
              Object RESULT =null;
		int trleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int trright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object tr = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
            if (!nombre_arList.equals("nada")) {
                ArrayList<Object> array_Pie_str = hashMap.getArrayListById(nombre_arList.toString());
                labelPie.addAll(array_Pie_str);
                variable_g.clear();
                nombre_arList = "nada";
            } else {
                ArrayList<Object> array_Pie_str = new ArrayList<>(variable_g);
                labelPie.addAll(array_Pie_str);
                variable_g.clear();
            }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("datos_pie",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // instr_grafo ::= instr_grafo datos_histograma 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr_grafo",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // instr_grafo ::= datos_histograma 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr_grafo",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // datos_histograma ::= TITULO DOSPUNTOS DOSPUNTOS CADENACHAR ABRIRCORCHETES CERRARCORCHETES IGUAL titulo_str FIN PUNTOYCOMA 
            {
              Object RESULT =null;
		int titulo_gleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int titulo_gright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object titulo_g = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
    titulo_final = titulo_g.toString();
    System.out.println("TITULO");
    RESULT = titulo_final;



              CUP$Parser$result = parser.getSymbolFactory().newSymbol("datos_histograma",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // datos_histograma ::= VALUES DOSPUNTOS DOSPUNTOS DOUBLE IGUAL ref_grafoarr FIN PUNTOYCOMA 
            {
              Object RESULT =null;
		int trleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int trright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object tr = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
            if (!nombre_arList.equals("nada")) {
                ArrayList<Object> arrayGrafico = hashMap.getArrayListById(nombre_arList.toString());
                arrayGraf.addAll(arrayGrafico);
                variable_g.clear();
                nombre_arList = "nada";
            } else {
                ArrayList<Object> arrayGrafico = new ArrayList<>(variable_g);
                arrayGraf.addAll(arrayGrafico);
                variable_g.clear();
            }
  

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("datos_histograma",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // titulo_str ::= CADENA_F 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                String titulo_strg= c;
                System.out.println("titulo histograma: " + c );
                RESULT =titulo_strg;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("titulo_str",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // titulo_str ::= PALABRA_I 
            {
              Object RESULT =null;
		int destleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int destright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String dest = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                boolean variableExists = false;
                for (valor_variable variable : tabla_simbolos) {
                    if (variable.id.equalsIgnoreCase(dest)) {
                        variableExists = true;
                        //System.out.println("variable encontrada");
                        if (variable.tipo.equals("cadena")) {
                            //System.out.println("es una cadena");
                            dest= variable.valoract;
                            System.out.println("titulo histograma: " + dest );
                            String titulo_strg= dest;
                            RESULT =titulo_strg;
                        } else if (variable.tipo.equals("double")) {
                            System.out.println("LA VARIABLE " + dest + "NO ES DE TIPO CHAR -INGRESAR UNA VALIDA.");
                            acumulador.addToOutput("LA VARIABLE " + dest + "NO ES DE TIPO CHAR -INGRESAR UNA VALIDA."); 
                        }
                        //RESULT = dest;
                        break; // No need to continue searching once found
                    }
                }
                if (!variableExists) {
                    System.out.println("Variable " + dest + " no existe en el programa.");
                    acumulador.addToOutput("Variable " + dest + " no existe en el programa."); 
                }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("titulo_str",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // grafo_arreglo ::= grafo_arreglo COMA arrValgraf 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("grafo_arreglo",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // grafo_arreglo ::= arrValgraf 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("grafo_arreglo",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // arrValgraf ::= CADENA_F 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		variable_g.add(a);
                String valor_var= a;
                RESULT =valor_var;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arrValgraf",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // arrValgraf ::= aritmetica 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		           
                if (val instanceof Double) {
                    variable_g.add(val);
                    RESULT =val;
                } else if (val instanceof String) {
                    variable_g.add(val);
                    RESULT =val;
                } else {
                    System.out.print("NO FUNCIONO");
                }
           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arrValgraf",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ref_grafoarr ::= ABRIRCORCHETES grafo_arreglo CERRARCORCHETES 
            {
              Object RESULT =null;
		int atleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int atright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object at = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        acumulador.addToOutput("--------------------"); 
        System.out.println(variable_g);
        
 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ref_grafoarr",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ref_grafoarr ::= ARROBA PALABRA_I 
            {
              Object RESULT =null;
		int desleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int desright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String des = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        nombre_arList = des.toString();
        ArrayList<Object> retrievedArrayVar1 = hashMap.getArrayListById(des.toString());
        System.out.println("-------" + des.toString() +"-------------");
        RESULT = nombre_arList;
        //variable_g.clear();

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ref_grafoarr",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
