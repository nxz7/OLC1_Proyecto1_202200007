// ------------  Paquete e importaciones ------------
package analizadores;

import java_cup.runtime.*;
import java.util.LinkedList;
import funciones.token;
import funciones.valor;
import java.util.ArrayList;
import funciones.valor_variable;

//------> Codigo para el parser
//------> Declaracion de variables, funciones y funciones de error

parser code 
{:
    public String resultado = ""; 
    public ArrayList<valor> lista = new ArrayList<>();
    public ArrayList<valor_variable> tabla_simbolos = new ArrayList<>();


    public void syntax_error(Symbol s)
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Recuperado" );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Sin recuperacion." );
    }

:}

//------> Codigo para las acciones gramaticales (no tocar)
action code
{:  :}

//------> Declaración de terminales
terminal String IGUAL, PUNTOYCOMA, DOSPUNTOS, COMA;
terminal String FIN;
terminal String CONSOLE;
terminal String CADENA_F;
terminal String NUMERO;
terminal String PRINT,OPENCOM,CLOSECOM;
terminal String VAR, DOUBLE, GUION, PROGRAMPAL, ABRIRCORCHETES, CERRARCORCHETES, CADENACHAR, ARREGLO, ARROBA, ABRIRPARENTESIS, CERRARPARENTESIS, SUMA, RESTA, MULTIPLICACION, DIVISION, MODULO, MEDIA, MEDIANA, MODA, VARIANZA, MAX, MIN, COLUMN, EXEC, VALUES, TITULO, LABEL, GRAPHBAR, GRAPHPIE, GRAPHLINE, HISTOGRAM, EJEX, EJEY, TITULOX, TITULOY;
terminal String PALABRA_I;

//------> Declaración de no terminales
non terminal inicio;
non terminal lista_instr;
non terminal instruccion;
non terminal impresion ;
non terminal lista_expresion;
non terminal expresion;
non terminal aritmetica;
non terminal variables;
non terminal tipo;
non terminal lista_arreglo;

//------> PRECEDENCIA


//------> Definir Simbolo Inicial
start with inicio;

// ------------>  Producciones  <------------
inicio ::= lista_instr
;

lista_instr ::= lista_instr instruccion
    | instruccion
;

instruccion ::= impresion
    | variables
    | error PUNTOYCOMA
    | error FIN PUNTOYCOMA 
;

impresion ::= CONSOLE DOSPUNTOS DOSPUNTOS PRINT IGUAL lista_expresion FIN PUNTOYCOMA     {: 
        System.out.print("!Salida: ");
        for (valor v : lista) {
            System.out.print("," + v.resultado);
        }
        lista.clear(); // Limpiar la lista después de imprimir
        System.out.println(" ");
    :};

lista_expresion ::= lista_expresion COMA expresion
	| expresion
;


expresion ::= CADENA_F:a
            {:
                valor elemento = new valor("string", "primitivo", a, null, a);
		lista.add(elemento);
                String valor_var= a;
                RESULT =valor_var;
            :}
        | aritmetica:val
            {:           
                if (val instanceof Double) {
                    valor elemento = new valor("double", "primitivo", val.toString(), null, val.toString());
                    lista.add(elemento);
                    RESULT =val;
                } else if (val instanceof String) {
                    valor elemento = new valor("string", "primitivo", (String) val, null, (String) val);
                    lista.add(elemento);
                    RESULT =val;
                } else {
                    System.out.print("NO FUNCIONO");
                }
           :}
;


aritmetica ::= NUMERO:val    
            {: 
                RESULT = Double.parseDouble(val);
            :}
        | PALABRA_I:varbuscar
            {:           
                boolean variableExists = false;
                for (valor_variable variable : tabla_simbolos) {
                    if (variable.id.equals(varbuscar)) {
                        variableExists = true;
                        System.out.println("variable encontrada");
                        if (variable.tipo.equals("cadena")) {
                            System.out.println("es una cadena");
                            varbuscar= variable.valoract;
                            RESULT= varbuscar;
                        } else if (variable.tipo.equals("double")) {
                            // If tipo is "double", convert valoract to double
                            double valorDouble;
                            if (variable.valoract instanceof String) {
                                // de str a double
                                valorDouble = Double.parseDouble((String) variable.valoract);
                                 RESULT=valorDouble;
                            } else {
                                // otros tipos
                                System.out.println("Unsupported data type for valoract: " + variable.valoract.getClass().getName());
                                break; // bai 
                            }
                        }
                        //RESULT = varbuscar;
                        break; // No need to continue searching once found
                    }
                }

                if (!variableExists) {
                    System.out.println("Variable " + varbuscar + " not found.");
                }

           :}
        |  SUMA ABRIRPARENTESIS aritmetica:izq COMA aritmetica:der CERRARPARENTESIS  
           {: 
                        double result_s = (Double) izq + (Double) der;
                        RESULT = result_s; 
            :}
        |  RESTA ABRIRPARENTESIS aritmetica:izq COMA aritmetica:der CERRARPARENTESIS  
           {: 
                        double result_s = (Double) izq - (Double) der;
                        RESULT = result_s; 
            :}
        |  MULTIPLICACION ABRIRPARENTESIS aritmetica:izq COMA aritmetica:der CERRARPARENTESIS  
           {: 
                        double result_s = (Double) izq * (Double) der;
                        RESULT = result_s; 
            :}
        |  DIVISION ABRIRPARENTESIS aritmetica:izq COMA aritmetica:der CERRARPARENTESIS  
           {: 
                        double result_s = (Double) izq / (Double) der;
                        RESULT = result_s; 
            :}
        |  MODULO ABRIRPARENTESIS aritmetica:izq COMA aritmetica:der CERRARPARENTESIS  
           {: 
                        double result_s = (Double) izq % (Double) der;
                        RESULT = result_s; 
            :}
;


variables::= VAR DOSPUNTOS tipo:tp DOSPUNTOS DOSPUNTOS PALABRA_I:teid GUION expresion:val_var FIN PUNTOYCOMA
            {:
                    if (tp == "double") {
                        valor_variable nueva_var = new valor_variable(teid.toString(), "double", val_var.toString(), null, 0, 0, val_var.toString());
                        tabla_simbolos.add(nueva_var);
                        lista.clear();
                        for (valor_variable variable : tabla_simbolos) {
                            System.out.println("ID: " + variable.id);
                            System.out.println("valor: " + variable.valoract);
                            System.out.println("tipo: " + variable.tipo);
                        }

                    } else if (tp== "String") {
                        valor_variable nueva_var = new valor_variable(teid.toString(), "cadena", val_var.toString(), null, 0, 0, val_var.toString());
                        tabla_simbolos.add(nueva_var);
                        lista.clear();
                        for (valor_variable variable : tabla_simbolos) {
                            System.out.println("ID: " + variable.id);
                            System.out.println("valor: " + variable.valoract);
                            System.out.println("tipo: " + variable.tipo);
                        }


                    } else {
                                System.out.println("ELEGIR UN VALOR VALIDO PARA CREAR LA VARIABLE");
                    }
            :}
        | ARREGLO DOSPUNTOS tipo:tp DOSPUNTOS DOSPUNTOS ARROBA PALABRA_I GUION ABRIRCORCHETES lista_arreglo:at CERRARCORCHETES FIN PUNTOYCOMA
            {:           
                        System.out.println("DECLARAR ARREGLOS");
           :}
;


tipo::= DOUBLE:tp
            {:
                String tipo_s = "double";
                RESULT = tipo_s; 
            :}
        | CADENACHAR ABRIRCORCHETES CERRARCORCHETES
            {:           
                String tipo_s = "String";
                RESULT = tipo_s; 
           :}
;

lista_arreglo::= NUMERO
;