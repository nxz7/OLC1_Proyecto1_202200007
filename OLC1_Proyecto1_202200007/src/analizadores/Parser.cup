// ------------  Paquete e importaciones ------------
package analizadores;

import java_cup.runtime.*;
import java.util.LinkedList;
import funciones.token;
import funciones.valor;
import java.util.ArrayList;


//------> Codigo para el parser
//------> Declaracion de variables, funciones y funciones de error

parser code 
{:
    public String resultado = ""; 
    public ArrayList<valor> lista = new ArrayList<>();

    public void syntax_error(Symbol s)
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Recuperado" );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Sin recuperacion." );
    }

:}

//------> Codigo para las acciones gramaticales (no tocar)
action code
{:  :}

//------> Declaración de terminales
terminal String IGUAL, PUNTOYCOMA, DOSPUNTOS, COMA;
terminal String FIN;
terminal String CONSOLE;
terminal String CADENA_F;
terminal String NUMERO;
terminal String PRINT,OPENCOM,CLOSECOM;
terminal String VAR, DOUBLE, GUION, PROGRAMPAL, ABRIRCORCHETES, CERRARCORCHETES, CADENACHAR, ARREGLO, ARROBA, ABRIRPARENTESIS, CERRARPARENTESIS, SUMA, RESTA, MULTIPLICACION, DIVISION, MODULO, MEDIA, MEDIANA, MODA, VARIANZA, MAX, MIN, COLUMN, EXEC, VALUES, TITULO, LABEL, GRAPHBAR, GRAPHPIE, GRAPHLINE, HISTOGRAM, EJEX, EJEY, TITULOX, TITULOY;


//------> Declaración de no terminales
non terminal inicio;
non terminal lista_instr;
non terminal instruccion;
non terminal impresion ;
non terminal lista_expresion;
non terminal expresion;

//------> PRECEDENCIA


//------> Definir Simbolo Inicial
start with inicio;

// ------------>  Producciones  <------------
inicio ::= lista_instr
;

lista_instr ::= lista_instr instruccion
    | instruccion
;

instruccion ::= impresion
    | error PUNTOYCOMA
    | error FIN PUNTOYCOMA 
;

impresion ::= CONSOLE DOSPUNTOS DOSPUNTOS PRINT IGUAL lista_expresion FIN PUNTOYCOMA     {: 
        System.out.print("! Salida: ");
        for (valor v : lista) {
            System.out.print("," + v.resultado);
        }
        lista.clear(); // Limpiar la lista después de imprimir
    :};

lista_expresion ::= lista_expresion COMA expresion
	| expresion
;


expresion ::= CADENA_F:a
            {:
                valor elemento = new valor("string", "primitivo", a, null, a);
		lista.add(elemento);
            :}
        | NUMERO:a
            {:
                valor elemento = new valor("int", "primitivo", a, null, a);
		lista.add(elemento);
           :}
;