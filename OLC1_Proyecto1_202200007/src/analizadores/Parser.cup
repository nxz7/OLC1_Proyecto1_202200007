// ------------  Paquete e importaciones ------------
package analizadores;

import java_cup.runtime.*;
import java.util.LinkedList;
import funciones.token;
import funciones.valor;
import java.util.ArrayList;
import funciones.valor_variable;
import java.lang.reflect.Array;
import funciones.IdArrayListHashMap;
import java.util.ArrayList;
import java.util.HashMap;
import funciones.acumulador;
import funciones.graficos;
import java.awt.Color;
import java.io.StringReader;
import java.util.List;

//------> Codigo para el parser
//------> Declaracion de variables, funciones y funciones de error

parser code 
{:
    public String resultado = ""; 
    public ArrayList<valor> lista = new ArrayList<>();
    public static ArrayList<valor_variable> tabla_simbolos = new ArrayList<>();
    public ArrayList<Object> arrayVar = new ArrayList<>();
    public ArrayList<Object> variable_g = new ArrayList<>();


    public ArrayList<Object> arrayGraf = new ArrayList<>();

    public ArrayList<Object> valoresPie = new ArrayList<>();
    public ArrayList<Object> labelPie = new ArrayList<>();

    public ArrayList<Object> eje_x = new ArrayList<>();
    public ArrayList<Object> eje_y = new ArrayList<>();

    public ArrayList<Object> eje_xBarras = new ArrayList<>();
    public ArrayList<Object> eje_yBarras = new ArrayList<>();

    public IdArrayListHashMap hashMap = new IdArrayListHashMap();
    public IdArrayListHashMap hashVarianza = new IdArrayListHashMap();
    public IdArrayListHashMap hashgrafico= new IdArrayListHashMap();
    public String titulo_strg;
    public static String titulo_final;
    public static String titulo_pie;
    public static String nombre_arList = "nada";

    public static String titulo_line;
    public static String titulox_line;
    public static String tituloy_line;

    public static String titulo_barras;
    public static String titulox_barras;
    public static String tituloy_barras;

    //public static String titulog;
    public void syntax_error(Symbol s)
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Recuperado" );
            funciones.ErroresList.addErrorToList(s.right  , s.left, s.value.toString(), "SINTACTICO");
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Sin recuperacion." );
    }

:}

//------> Codigo para las acciones gramaticales (no tocar)
action code
{:  :}

//------> Declaración de terminales
terminal String IGUAL, PUNTOYCOMA, DOSPUNTOS, COMA;
terminal String FIN;
terminal String CONSOLE;
terminal String CADENA_F;
terminal String NUMERO;
terminal String PRINT,OPENCOM,CLOSECOM;
terminal String VAR, DOUBLE, GUION, PROGRAMPAL, ABRIRCORCHETES, CERRARCORCHETES, CADENACHAR, ARREGLO, ARROBA, ABRIRPARENTESIS, CERRARPARENTESIS, SUMA, RESTA, MULTIPLICACION, DIVISION, MODULO, MEDIA, MEDIANA, MODA, VARIANZA, MAX, MIN, COLUMN, EXEC, VALUES, TITULO, LABEL, GRAPHBAR, GRAPHPIE, GRAPHLINE, HISTOGRAM, EJEX, EJEY, TITULOX, TITULOY;
terminal String PALABRA_I,GUIONREV;

//------> Declaración de no terminales
non terminal inicio;
non terminal lista_instr;
non terminal instruccion;
non terminal impresion ;
non terminal lista_expresion;
non terminal expresion;
non terminal aritmetica;
non terminal variables;
non terminal tipo;
non terminal lista_arreglo;
non terminal arrVal;
non terminal ref_arreglo;
non terminal estadistica_arreglo;
non terminal graficos_inst;
non terminal datos_histograma;
non terminal titulo_str;
non terminal instr_grafo;
non terminal grafo_arreglo;
non terminal arrValgraf;
non terminal ref_grafoarr;
non terminal datos_pie;
non terminal instr_pie;
non terminal datos_line;
non terminal instr_line;
non terminal instr_bar; 
non terminal datos_bar;

//------> PRECEDENCIA


//------> Definir Simbolo Inicial
start with inicio;

// ------------>  Producciones  <------------
inicio ::= PROGRAMPAL lista_instr FIN PROGRAMPAL
;

lista_instr ::= lista_instr instruccion
    | instruccion
;

instruccion ::= impresion
    | variables
    | graficos_inst
    | error PUNTOYCOMA
    | error FIN PUNTOYCOMA 
;

impresion ::= CONSOLE DOSPUNTOS DOSPUNTOS PRINT IGUAL lista_expresion FIN PUNTOYCOMA     {: 
        System.out.print("!Salida: ");
        acumulador.addSalida("!Salida: ");
        for (valor v : lista) {
            System.out.print(v.resultado + "," );
            acumulador.addSalida(v.resultado + "," );    
        }
        lista.clear(); // Limpiar la lista después de imprimir
        System.out.println(" ");
        System.out.println("-------------------------------------------");
        acumulador.addToOutput("-------------------------------------------" ); 
    :}
    |CONSOLE DOSPUNTOS DOSPUNTOS COLUMN IGUAL expresion:titulog GUIONREV ref_arreglo FIN PUNTOYCOMA {:
        System.out.println("-------"+ titulog + "-------");
        acumulador.addToOutput("------------------------------" );
        acumulador.addToOutput("        "+ titulog + "        ");
        acumulador.addToOutput("------------------------------" );
        lista.clear();
//arrayvar.clear prueba
        arrayVar.clear();
        nombre_arList = "nada";
    :}
;

lista_expresion ::= lista_expresion COMA expresion
	| expresion
;



expresion ::= CADENA_F:a
            {:
                valor elemento = new valor("string", "primitivo", a, null, a);
		lista.add(elemento);
                String valor_var= a;
                RESULT =valor_var;
            :}
        | aritmetica:val
            {:           
                if (val instanceof Double) {
                    valor elemento = new valor("double", "primitivo", val.toString(), null, val.toString());
                    lista.add(elemento);
                    RESULT =val;
                } else if (val instanceof String) {
                    valor elemento = new valor("string", "primitivo", (String) val, null, (String) val);
                    lista.add(elemento);
                    RESULT =val;
                } else {
                    System.out.print("NO FUNCIONO");
                }
           :}
;


aritmetica ::= NUMERO:val    
            {: 
                RESULT = Double.parseDouble(val);
            :}
        | PALABRA_I:varbuscar
            {:           
                boolean variableExists = false;
                for (valor_variable variable : tabla_simbolos) {
                    if (variable.id.equalsIgnoreCase(varbuscar)) {
                        variableExists = true;
                        //System.out.println("variable encontrada");
                        if (variable.tipo.equals("cadena")) {
                            //System.out.println("es una cadena");
                            varbuscar= variable.valoract;
                            RESULT= varbuscar;
                        } else if (variable.tipo.equals("double")) {
                            // If tipo is "double", convert valoract to double
                            double valorDouble;
                            if (variable.valoract instanceof String) {
                                // de str a double
                                valorDouble = Double.parseDouble((String) variable.valoract);
                                RESULT=valorDouble;
                            } else {
                                // otros tipos
                                System.out.println("Unsupported data type for valoract: " + variable.valoract.getClass().getName());
                                break; // bai 
                            }
                        }
                        //RESULT = varbuscar;
                        break; // No need to continue searching once found
                    }
                }
                if (!variableExists) {
                    System.out.println("Variable " + varbuscar + " no existe en el programa.");
                    acumulador.addToOutput("Variable " + varbuscar + " no existe en el programa."); 
                }

           :}
        |  SUMA ABRIRPARENTESIS aritmetica:izq COMA aritmetica:der CERRARPARENTESIS  
           {: 
                        double result_s = (Double) izq + (Double) der;
                        RESULT = result_s; 
            :}
        |  RESTA ABRIRPARENTESIS aritmetica:izq COMA aritmetica:der CERRARPARENTESIS  
           {: 
                        double result_s = (Double) izq - (Double) der;
                        RESULT = result_s; 
            :}
        |  MULTIPLICACION ABRIRPARENTESIS aritmetica:izq COMA aritmetica:der CERRARPARENTESIS  
           {: 
                        double result_s = (Double) izq * (Double) der;
                        RESULT = result_s; 
            :}
        |  DIVISION ABRIRPARENTESIS aritmetica:izq COMA aritmetica:der CERRARPARENTESIS  
           {: 
                        double result_s = (Double) izq / (Double) der;
                        RESULT = result_s; 
            :}
        |  MODULO ABRIRPARENTESIS aritmetica:izq COMA aritmetica:der CERRARPARENTESIS  
           {: 
                        double result_s = (Double) izq % (Double) der;
                        RESULT = result_s; 
            :}
        | MEDIA ABRIRPARENTESIS estadistica_arreglo:hashnom CERRARPARENTESIS  
           {: 
                        ArrayList<Object> retrievedArrayS = hashVarianza.getArrayListById(hashnom.toString());
                        hashVarianza.calculateMedian(retrievedArrayS);
                        double total = hashVarianza.calculateMean(retrievedArrayS);
                        //System.out.println(total);
                        RESULT = total;
            :}
        |  MEDIANA ABRIRPARENTESIS estadistica_arreglo:hashnom CERRARPARENTESIS  
           {: 
                        ArrayList<Object> retrievedArrayS =hashVarianza.getArrayListById(hashnom.toString());
                        hashVarianza.calculateMedian(retrievedArrayS);
                        double total = hashVarianza.calculateMedian(retrievedArrayS);
                        //System.out.println(total);
                        RESULT = total;
            :}
        | MODA ABRIRPARENTESIS estadistica_arreglo:hashnom CERRARPARENTESIS  
           {: 
                        ArrayList<Object> retrievedArrayS =hashVarianza.getArrayListById(hashnom.toString());
                        hashVarianza.calculateMedian(retrievedArrayS);
                        double total = hashVarianza.calculateMode(retrievedArrayS);
                        //System.out.println(total);
                        RESULT = total;
            :}
        |  VARIANZA ABRIRPARENTESIS estadistica_arreglo:hashnom CERRARPARENTESIS  
           {: 
                        ArrayList<Object> retrievedArrayS =hashVarianza.getArrayListById(hashnom.toString());
                        hashVarianza.calculateMedian(retrievedArrayS);
                        double total = hashVarianza.calculateVariance(retrievedArrayS);
                        //System.out.println(total);
                        RESULT = total;
            :}
        |  MAX ABRIRPARENTESIS estadistica_arreglo:hashnom CERRARPARENTESIS  
           {: 
                        ArrayList<Object> retrievedArrayS =hashVarianza.getArrayListById(hashnom.toString());
                        hashVarianza.calculateMedian(retrievedArrayS);
                        double total = hashVarianza.calculateMax(retrievedArrayS);
                        //System.out.println(total);
                        RESULT = total;
            :}
        |  MIN ABRIRPARENTESIS estadistica_arreglo:hashnom CERRARPARENTESIS  
           {: 
                        ArrayList<Object> retrievedArrayS =hashVarianza.getArrayListById(hashnom.toString());
                        hashVarianza.calculateMedian(retrievedArrayS);
                        double total = hashVarianza.calculateMin(retrievedArrayS);
                        //System.out.println(total);
                        RESULT = total;
            :}

;


variables::= VAR DOSPUNTOS tipo:tp DOSPUNTOS DOSPUNTOS PALABRA_I:teid GUION expresion:val_var FIN PUNTOYCOMA
            {:
                    if (tp == "double") {
                        valor_variable nueva_var = new valor_variable(teid.toString(), "double", val_var.toString(), null,  0,  0, val_var.toString());
                        tabla_simbolos.add(nueva_var);
                        lista.clear();
                        /*
                        for (valor_variable variable : tabla_simbolos) {
                            System.out.println("ID: " + variable.id);
                            System.out.println("valor: " + variable.valoract);
                            System.out.println("tipo: " + variable.tipo);
                        }*/

                        System.out.println("-------------------------------------------");
                        nombre_arList = "nada";
                    } else if (tp== "String") {
                        valor_variable nueva_var = new valor_variable(teid.toString(), "cadena", val_var.toString(), null, 0, 0, val_var.toString());
                        tabla_simbolos.add(nueva_var);
                        lista.clear();

                        /*
                        for (valor_variable variable : tabla_simbolos) {
                            System.out.println("ID: " + variable.id);
                            System.out.println("valor: " + variable.valoract);
                            System.out.println("tipo: " + variable.tipo);
                        }*/

                        System.out.println("-------------------------------------------");
                        nombre_arList = "nada";
                    } else {
                                System.out.println("ELEGIR UN VALOR VALIDO PARA CREAR LA VARIABLE");
                                nombre_arList = "nada";

                    }
            :}
        | ARREGLO DOSPUNTOS tipo:tp DOSPUNTOS DOSPUNTOS ARROBA PALABRA_I:teid GUION ABRIRCORCHETES lista_arreglo:at CERRARCORCHETES FIN PUNTOYCOMA
            {:           
                    //System.out.println("DECLARAR ARREGLOS");
                    if (tp == "double") {
                        ArrayList<Object> arrayVarToInsert = new ArrayList<>(arrayVar); 
                        valor_variable nuevo_arr = new valor_variable(teid.toString(), "double", "arreglo", arrayVarToInsert,  0,  0, "arreglo");
                        tabla_simbolos.add(nuevo_arr);
                        hashMap.setArrayListById(teid.toString(), arrayVarToInsert);
                        
                        lista.clear();
                         /*   
                        System.out.println("ID: " + nuevo_arr.id);
                        System.out.println("tipo: " + nuevo_arr.tipo);
                        System.out.println("VALORES" );
                        for (Object value : nuevo_arr.valorArreglo) {
                            System.out.println(value);
                        }

                        
                        System.out.println("-------------------------------------------");
                        ArrayList<Object> retrievedArrayVar1 = hashMap.getArrayListById(teid.toString());
                        System.out.println("-------" + teid.toString()+"-------------");
                        System.out.println(retrievedArrayVar1);
                        */
                        arrayVar.clear();
                        nombre_arList = "nada";
                    } else if (tp== "String") {
                        ArrayList<Object> arrayVarToInsert = new ArrayList<>(arrayVar); 
                        valor_variable nuevo_arr = new valor_variable(teid.toString(), "cadena", "arreglo", arrayVarToInsert, 0, 0, "arreglo");
                        tabla_simbolos.add(nuevo_arr);
                        hashMap.setArrayListById(teid.toString(), arrayVarToInsert);
                        lista.clear();
                        nombre_arList = "nada";
                        /*
                        System.out.println("ID: " + nuevo_arr.id);
                        System.out.println("tipo: " + nuevo_arr.tipo);
                        System.out.println("VALORES" );
                        for (Object value : nuevo_arr.valorArreglo) {
                            System.out.println(value);
                        }*/

                        arrayVar.clear();

                        /*
                        System.out.println("-------------------------------------------");
                        System.out.println("-------------------------------------------");
                        ArrayList<Object> retrievedArrayVar1 = hashMap.getArrayListById(teid.toString());
                        System.out.println("-------" + teid.toString()+"-------------");
                        System.out.println(retrievedArrayVar1);*/

                    } else {
                                System.out.println("ELEGIR UN VALOR VALIDO PARA CREAR LA VARIABLE");
                    }
           :}
;


tipo::= DOUBLE:tp
            {:
                String tipo_s = "double";
                RESULT = tipo_s; 
            :}
        | CADENACHAR ABRIRCORCHETES CERRARCORCHETES
            {:           
                String tipo_s = "String";
                RESULT = tipo_s; 
           :}
;

lista_arreglo::= lista_arreglo COMA arrVal
        |arrVal
;


arrVal ::= CADENA_F:a
            {:
		arrayVar.add(a);
                String valor_var= a;
                RESULT =valor_var;
            :}
        | aritmetica:val
            {:           
                if (val instanceof Double) {
                    arrayVar.add(val);
                    RESULT =val;
                } else if (val instanceof String) {
                    arrayVar.add(val);
                    RESULT =val;
                } else {
                    System.out.print("NO FUNCIONO");
                }
           :}
;

ref_arreglo::= ABRIRCORCHETES lista_arreglo:at CERRARCORCHETES 
{:
        acumulador.addToOutput("--------------------"); 
        //si solo da una lista para imprimir
        for (Object obj : arrayVar) {
            System.out.println(obj);
            acumulador.addToOutput(obj.toString()); 
        }
        
 :}
        | ARROBA PALABRA_I:des
{:
         nombre_arList = des.toString();
        ArrayList<Object> retrievedArrayVar1 = hashMap.getArrayListById(des.toString());
        System.out.println("-------" + des.toString() +"-------------");
        acumulador.addToOutput("--------------------"); 
        for (Object item : retrievedArrayVar1) {
         System.out.println(item);
         acumulador.addToOutput(item.toString()); 
        }
        RESULT = nombre_arList;
:}
;

estadistica_arreglo::= ABRIRCORCHETES lista_arreglo:at CERRARCORCHETES 
{:
        String prueba = "prueba";
        ArrayList<Object> arrayVarEst = new ArrayList<>(arrayVar);
        
        hashVarianza.setArrayListById(prueba, arrayVarEst);
        arrayVar.clear();
        RESULT = prueba;

   
 :}
        | ARROBA PALABRA_I:des
{:
        //nombre_arList = des.toString();
        ArrayList<Object> retrievedArraySr = hashMap.getArrayListById(des.toString());
        String encontrada = des.toString();
        hashVarianza.setArrayListById(encontrada, retrievedArraySr);
        RESULT = encontrada;
:}
;




graficos_inst ::= HISTOGRAM ABRIRPARENTESIS instr_grafo EXEC HISTOGRAM FIN PUNTOYCOMA CERRARPARENTESIS FIN PUNTOYCOMA
{:         
            graficos.createHistogram(titulo_final.toString(), arrayGraf, Color.RED);
            acumulador.addToOutput("----> HISTOGRAMA CREADO CORRECTAMENTE" );
            arrayGraf.clear();
            acumulador.addToOutput("-------------> HISTOGRAMA CREADO ");
    
:}| GRAPHPIE ABRIRPARENTESIS instr_pie EXEC GRAPHPIE FIN PUNTOYCOMA CERRARPARENTESIS FIN PUNTOYCOMA 
{:
        graficos.createPieGraph(titulo_pie.toString(), labelPie, valoresPie, Color.GRAY);
        labelPie.clear();
        valoresPie.clear();
        acumulador.addToOutput("-------------> PIE PIE PIE!");

:} | GRAPHLINE ABRIRPARENTESIS instr_line EXEC GRAPHLINE FIN PUNTOYCOMA CERRARPARENTESIS FIN PUNTOYCOMA 
{:

        graficos.createLineGraph(titulo_line, titulox_line, tituloy_line, eje_x, eje_y, Color.BLUE);
        acumulador.addToOutput("-------------> GRAFICA LINEA CREADA");
        eje_x.clear();
        eje_y.clear();
:} | GRAPHBAR ABRIRPARENTESIS instr_bar EXEC GRAPHBAR FIN PUNTOYCOMA CERRARPARENTESIS FIN PUNTOYCOMA 
{:
    System.out.println(titulo_barras);
    System.out.println(titulox_barras);
    System.out.println(tituloy_barras);
    graficos.createBarGraph(titulo_barras, titulox_barras, tituloy_barras, eje_xBarras, eje_yBarras, Color.ORANGE);
    acumulador.addToOutput("-------------> GRAFICA BARRAS CREADA");
    eje_xBarras.clear();
    eje_yBarras.clear();
:}
;


instr_bar ::= instr_bar datos_bar
    | datos_bar
;


datos_bar::= TITULO DOSPUNTOS DOSPUNTOS CADENACHAR ABRIRCORCHETES CERRARCORCHETES IGUAL titulo_str:titulo_g FIN PUNTOYCOMA
{:
    titulo_barras = titulo_g.toString();
    RESULT = titulo_barras ;
:} |  TITULOX DOSPUNTOS DOSPUNTOS CADENACHAR ABRIRCORCHETES CERRARCORCHETES IGUAL titulo_str:titulo_g FIN PUNTOYCOMA
{:
    titulox_barras = titulo_g.toString();
    RESULT = titulox_barras;

:}
|  TITULOY DOSPUNTOS DOSPUNTOS CADENACHAR ABRIRCORCHETES CERRARCORCHETES IGUAL titulo_str:titulo_g FIN PUNTOYCOMA
{:
    tituloy_barras = titulo_g.toString();
    RESULT = tituloy_barras;

:}| EJEY DOSPUNTOS DOSPUNTOS DOUBLE IGUAL ref_grafoarr:tr FIN PUNTOYCOMA
{:
            if (!nombre_arList.equals("nada")) {
                eje_yBarras.clear();
                ArrayList<Object> array_Bar = hashMap.getArrayListById(nombre_arList.toString());
                eje_yBarras.addAll(array_Bar);
                variable_g.clear();
                nombre_arList = "nada";
            } else {
                eje_yBarras.clear();
                ArrayList<Object> array_Bar = new ArrayList<>(variable_g);
                eje_yBarras.addAll(array_Bar);
                variable_g.clear();
            }
:}       
 | EJEX DOSPUNTOS DOSPUNTOS CADENACHAR ABRIRCORCHETES CERRARCORCHETES IGUAL ref_grafoarr:tr FIN PUNTOYCOMA
{:
            if (!nombre_arList.equals("nada")) {
                eje_xBarras.clear();
                ArrayList<Object> array_Bar_str = hashMap.getArrayListById(nombre_arList.toString());
                eje_xBarras.addAll(array_Bar_str);
                variable_g.clear();
                nombre_arList = "nada";
            } else {
                eje_xBarras.clear();
                ArrayList<Object> array_Bar_str = new ArrayList<>(variable_g);
                eje_xBarras.addAll(array_Bar_str);
                variable_g.clear();
            }
:}
        
;




instr_line ::= instr_line datos_line
    | datos_line
;

datos_line::= TITULO DOSPUNTOS DOSPUNTOS CADENACHAR ABRIRCORCHETES CERRARCORCHETES IGUAL titulo_str:titulo_g FIN PUNTOYCOMA
{:
    titulo_line = titulo_g.toString();
    RESULT = titulo_line ;
:} |  TITULOX DOSPUNTOS DOSPUNTOS CADENACHAR ABRIRCORCHETES CERRARCORCHETES IGUAL titulo_str:titulo_g FIN PUNTOYCOMA
{:
    titulox_line = titulo_g.toString();
    RESULT = titulox_line;

:}
|  TITULOY DOSPUNTOS DOSPUNTOS CADENACHAR ABRIRCORCHETES CERRARCORCHETES IGUAL titulo_str:titulo_g FIN PUNTOYCOMA
{:
    tituloy_line = titulo_g.toString();
    RESULT = tituloy_line;

:}
| EJEY DOSPUNTOS DOSPUNTOS DOUBLE IGUAL ref_grafoarr:tr FIN PUNTOYCOMA
{:
            if (!nombre_arList.equals("nada")) {
                eje_y.clear();
                ArrayList<Object> array_line = hashMap.getArrayListById(nombre_arList.toString());
                eje_y.addAll(array_line);
                variable_g.clear();
                nombre_arList = "nada";
            } else {
                eje_y.clear();
                ArrayList<Object> array_line = new ArrayList<>(variable_g);
                eje_y.addAll(array_line);
                variable_g.clear();
            }
:}       
 | EJEX DOSPUNTOS DOSPUNTOS CADENACHAR ABRIRCORCHETES CERRARCORCHETES IGUAL ref_grafoarr:tr FIN PUNTOYCOMA
{:
            if (!nombre_arList.equals("nada")) {
                eje_x.clear();
                ArrayList<Object> array_line_str = hashMap.getArrayListById(nombre_arList.toString());
                eje_x.addAll(array_line_str);
                variable_g.clear();
                nombre_arList = "nada";
            } else {
                eje_x.clear();
                ArrayList<Object> array_line_str = new ArrayList<>(variable_g);
                eje_x.addAll(array_line_str);
                variable_g.clear();
            }
:}
            
;







instr_pie ::= instr_pie datos_pie
    | datos_pie
;

datos_pie ::= TITULO DOSPUNTOS DOSPUNTOS CADENACHAR ABRIRCORCHETES CERRARCORCHETES IGUAL titulo_str:titulo_g FIN PUNTOYCOMA
{:
    titulo_pie = titulo_g.toString();
    System.out.println("TITULO");
    RESULT = titulo_pie ;
:}
        | VALUES DOSPUNTOS DOSPUNTOS DOUBLE IGUAL ref_grafoarr:tr FIN PUNTOYCOMA
{:
            if (!nombre_arList.equals("nada")) {
                valoresPie.clear();
                ArrayList<Object> array_Pie = hashMap.getArrayListById(nombre_arList.toString());
                valoresPie.addAll(array_Pie);
                variable_g.clear();
                nombre_arList = "nada";
            } else {
                valoresPie.clear();
                ArrayList<Object> array_Pie = new ArrayList<>(variable_g);
                valoresPie.addAll(array_Pie);
                variable_g.clear();
            }
:}        | LABEL DOSPUNTOS DOSPUNTOS CADENACHAR ABRIRCORCHETES CERRARCORCHETES IGUAL ref_grafoarr:tr FIN PUNTOYCOMA
{:
            if (!nombre_arList.equals("nada")) {
                labelPie.clear();
                ArrayList<Object> array_Pie_str = hashMap.getArrayListById(nombre_arList.toString());
                labelPie.addAll(array_Pie_str);
                variable_g.clear();
                nombre_arList = "nada";
            } else {
                labelPie.clear();
                ArrayList<Object> array_Pie_str = new ArrayList<>(variable_g);
                labelPie.addAll(array_Pie_str);
                variable_g.clear();
            }
:}

;

instr_grafo ::= instr_grafo datos_histograma
    | datos_histograma
;

datos_histograma ::= TITULO DOSPUNTOS DOSPUNTOS CADENACHAR ABRIRCORCHETES CERRARCORCHETES IGUAL titulo_str:titulo_g FIN PUNTOYCOMA
{:
    titulo_final = titulo_g.toString();
    System.out.println("TITULO");
    RESULT = titulo_final;


:}
        | VALUES DOSPUNTOS DOSPUNTOS DOUBLE IGUAL ref_grafoarr:tr FIN PUNTOYCOMA
{:
            if (!nombre_arList.equals("nada")) {
                arrayGraf.clear();
                ArrayList<Object> arrayGrafico = hashMap.getArrayListById(nombre_arList.toString());
                arrayGraf.addAll(arrayGrafico);
                variable_g.clear();
                nombre_arList = "nada";
            } else {
                arrayGraf.clear();
                ArrayList<Object> arrayGrafico = new ArrayList<>(variable_g);
                arrayGraf.addAll(arrayGrafico);
                variable_g.clear();
            }
  
:}        
;



titulo_str ::= CADENA_F:c
{:
                String titulo_strg= c;
                System.out.println("titulo histograma: " + c );
                RESULT =titulo_strg;
:}
            | PALABRA_I:dest
{:
                boolean variableExists = false;
                for (valor_variable variable : tabla_simbolos) {
                    if (variable.id.equalsIgnoreCase(dest)) {
                        variableExists = true;
                        //System.out.println("variable encontrada");
                        if (variable.tipo.equals("cadena")) {
                            //System.out.println("es una cadena");
                            dest= variable.valoract;
                            System.out.println("titulo histograma: " + dest );
                            String titulo_strg= dest;
                            RESULT =titulo_strg;
                        } else if (variable.tipo.equals("double")) {
                            System.out.println("LA VARIABLE " + dest + "NO ES DE TIPO CHAR -INGRESAR UNA VALIDA.");
                            acumulador.addToOutput("LA VARIABLE " + dest + "NO ES DE TIPO CHAR -INGRESAR UNA VALIDA."); 
                        }
                        //RESULT = dest;
                        break; // No need to continue searching once found
                    }
                }
                if (!variableExists) {
                    System.out.println("Variable " + dest + " no existe en el programa.");
                    acumulador.addToOutput("Variable " + dest + " no existe en el programa."); 
                }
:};



grafo_arreglo::= grafo_arreglo COMA arrValgraf
        |arrValgraf
;


arrValgraf ::= CADENA_F:a
            {:
		variable_g.add(a);
                String valor_var= a;
                RESULT =valor_var;
            :}
        | aritmetica:val
            {:           
                if (val instanceof Double) {
                    variable_g.add(val);
                    RESULT =val;
                } else if (val instanceof String) {
                    variable_g.add(val);
                    RESULT =val;
                } else {
                    System.out.print("NO FUNCIONO");
                }
           :}
;



ref_grafoarr::= ABRIRCORCHETES grafo_arreglo:at CERRARCORCHETES 
{:
        acumulador.addToOutput("--------------------"); 
        System.out.println(variable_g);
        
 :}
        | ARROBA PALABRA_I:des
{:
        nombre_arList = des.toString();
        ArrayList<Object> retrievedArrayVar1 = hashMap.getArrayListById(des.toString());
        System.out.println("-------" + des.toString() +"-------------");
        RESULT = nombre_arList;
        //variable_g.clear();
:}
;